
/*  A Bison parser, made from pddl+.yacc
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	OPEN_BRAC	257
#define	CLOSE_BRAC	258
#define	OPEN_SQ	259
#define	CLOSE_SQ	260
#define	DEFINE	261
#define	DOMAIN	262
#define	REQS	263
#define	EQUALITY	264
#define	STRIPS	265
#define	ADL	266
#define	NEGATIVE_PRECONDITIONS	267
#define	TYPING	268
#define	DISJUNCTIVE_PRECONDS	269
#define	EXT_PRECS	270
#define	UNIV_PRECS	271
#define	QUANT_PRECS	272
#define	COND_EFFS	273
#define	FLUENTS	274
#define	TIME	275
#define	DURATIVE_ACTIONS	276
#define	DURATION_INEQUALITIES	277
#define	CONTINUOUS_EFFECTS	278
#define	ACTION	279
#define	PROCESS	280
#define	EVENT	281
#define	DURATIVE_ACTION	282
#define	CONSTANTS	283
#define	PREDS	284
#define	FUNCTIONS	285
#define	TYPES	286
#define	ARGS	287
#define	PRE	288
#define	CONDITION	289
#define	START_PRE	290
#define	END_PRE	291
#define	EFFECTS	292
#define	INITIAL_EFFECT	293
#define	FINAL_EFFECT	294
#define	INVARIANT	295
#define	DURATION	296
#define	AT_START	297
#define	AT_END	298
#define	OVER_ALL	299
#define	AND	300
#define	OR	301
#define	EXISTS	302
#define	FORALL	303
#define	IMPLY	304
#define	NOT	305
#define	WHEN	306
#define	EITHER	307
#define	PROBLEM	308
#define	FORDOMAIN	309
#define	INITIALLY	310
#define	OBJECTS	311
#define	GOALS	312
#define	EQ	313
#define	LENGTH	314
#define	SERIAL	315
#define	PARALLEL	316
#define	METRIC	317
#define	MINIMIZE	318
#define	MAXIMIZE	319
#define	HASHT	320
#define	DURATION_VAR	321
#define	TOTAL_TIME	322
#define	INCREASE	323
#define	DECREASE	324
#define	SCALE_UP	325
#define	SCALE_DOWN	326
#define	ASSIGN	327
#define	GREATER	328
#define	GREATEQ	329
#define	LESS	330
#define	LESSEQ	331
#define	Q	332
#define	COLON	333
#define	BOGUS	334
#define	NAME	335
#define	FUNCTION_SYMBOL	336
#define	INTVAL	337
#define	FLOATVAL	338
#define	HYPHEN	339
#define	PLUS	340
#define	MUL	341
#define	DIV	342
#define	UMINUS	343

#line 16 "pddl+.yacc"

/*
Error reporting:
Intention is to provide error token on most bracket expressions,
so synchronisation can occur on next CLOSE_BRAC.
Hence error should be generated for innermost expression containing error.
Expressions which cause errors return a NULL values, and parser
always attempts to carry on.
This won't behave so well if CLOSE_BRAC is missing.

Naming conventions:
Generally, the names should be similar to the PDDL2.1 spec.
During development, they have also been based on older PDDL specs,
older PDDL+ and TIM parsers, and this shows in places.

All the names of fields in the semantic value type begin with t_
Corresponding categories in the grammar begin with c_
Corresponding classes have no prefix.

PDDL grammar       yacc grammar      type of corresponding semantic val.  

thing+             c_things          thing_list
(thing+)           c_thing_list      thing_list

*/

#include <stdlib.h>
#include <stdio.h>
#include <fstream.h>
#include <stl.h>
#include <ctype.h>

// This is now copied locally to avoid relying on installation 
// of flex++.

#include "FlexLexer.h"

#include "ptree.h"
#include "parse_error.h"

#define YYDEBUG 1 

int yyerror(char *);


extern int yylex();


#line 65 "pddl+.yacc"
typedef union	{
    parse_category* t_parse_category;

    effect_lists* t_effect_lists;
    effect* t_effect;
    simple_effect* t_simple_effect;
    cond_effect*   t_cond_effect;
    forall_effect* t_forall_effect;
    timed_effect* t_timed_effect;

    quantifier t_quantifier;
    metric_spec*  t_metric;
    optimization t_optimization;

    symbol* t_symbol;
    var_symbol*   t_var_symbol;
    pddl_type*    t_type;
    pred_symbol*  t_pred_symbol;
    func_symbol*  t_func_symbol;
    const_symbol* t_const_symbol;

    parameter_symbol_list* t_parameter_symbol_list;
    var_symbol_list* t_var_symbol_list;
    const_symbol_list* t_const_symbol_list;
    pddl_type_list* t_type_list;

    proposition* t_proposition;
    pred_decl* t_pred_decl;
    pred_decl_list* t_pred_decl_list;
    func_decl* t_func_decl;
    func_decl_list* t_func_decl_list;

    goal* t_goal;
    goal_list* t_goal_list;

    func_term* t_func_term;
    assignment* t_assignment;
    expression* t_expression;
    num_expression* t_num_expression;
    assign_op t_assign_op;
    comparison_op t_comparison_op;

    operator_* t_operator;
    operator_list* t_operator_list;

    action* t_action_def;
    event* t_event_def;
    process* t_process_def;
    durative_action* t_durative_action_def;

    problem* t_problem;
    length_spec* t_length_spec;

    domain* t_domain;    

    pddl_req_flag t_pddl_req_flag;

    plan* t_plan;
    plan_step* t_step;

    int ival;
    float fval;

    char* cp;
    int t_dummy;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		565
#define	YYFLAG		-32768
#define	YYNTBASE	90

#define YYTRANSLATE(x) ((unsigned)(x) <= 343 ? yytranslate[x] : 193)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,    12,    17,    20,    23,    26,    29,
    32,    34,    39,    44,    49,    52,    53,    56,    58,    63,
    67,    69,    71,    73,    75,    78,    79,    84,    88,    90,
    95,   100,   102,   106,   107,   112,   117,   119,   122,   123,
   126,   127,   132,   137,   139,   142,   146,   147,   149,   151,
   153,   155,   160,   162,   164,   167,   168,   171,   172,   179,
   182,   185,   186,   189,   192,   195,   196,   198,   200,   202,
   204,   206,   211,   213,   215,   217,   219,   222,   225,   228,
   229,   234,   239,   244,   252,   258,   260,   262,   265,   266,
   271,   276,   282,   288,   292,   297,   299,   301,   303,   305,
   308,   311,   314,   315,   321,   327,   333,   339,   345,   347,
   350,   352,   354,   360,   366,   372,   378,   383,   390,   400,
   410,   412,   414,   416,   418,   421,   422,   427,   429,   434,
   436,   444,   450,   456,   462,   468,   474,   480,   485,   491,
   497,   503,   509,   511,   513,   519,   525,   527,   529,   531,
   536,   541,   543,   548,   550,   552,   554,   556,   558,   560,
   562,   567,   572,   577,   583,   591,   597,   600,   601,   603,
   605,   607,   609,   614,   619,   624,   629,   634,   639,   642,
   644,   646,   648,   650,   652,   665,   670,   683,   688,   701,
   706,   718,   723,   727,   731,   732,   734,   739,   742,   743,
   748,   753,   758,   760,   762,   764,   766,   768,   770,   772,
   774,   776,   778,   780,   782,   784,   786,   788,   790,   792,
   797,   802,   815,   821,   824,   827,   830,   833,   836,   839,
   840,   845,   850,   855,   861,   866,   871,   872,   878,   880,
   882,   886,   888,   890,   892,   896,   900,   904,   908,   912,
   915,   916,   920,   922,   927,   929,   934,   936
};

static const short yyrhs[] = {    91,
     0,   176,     0,   188,     0,     3,     7,    93,    92,     4,
     0,     3,     7,    93,     1,     0,    94,    92,     0,   175,
    92,     0,   174,    92,     0,   160,    92,     0,   161,    92,
     0,   162,     0,     3,     8,    81,     4,     0,     3,     9,
    95,     4,     0,     3,     9,     1,     4,     0,    95,   173,
     0,     0,    97,    96,     0,    97,     0,     3,    98,   104,
     4,     0,     3,     1,     4,     0,    81,     0,    59,     0,
    81,     0,    81,     0,   101,   102,     0,     0,     3,   103,
   104,     4,     0,     3,     1,     4,     0,    81,     0,   105,
    85,   117,   104,     0,   105,    85,   115,   104,     0,   105,
     0,    78,   111,   105,     0,     0,   108,    85,   117,   106,
     0,   108,    85,   115,   106,     0,   108,     0,   113,   107,
     0,     0,   114,   108,     0,     0,   118,    85,   117,   109,
     0,   118,    85,   115,   109,     0,   118,     0,   110,   113,
     0,   110,    78,   112,     0,     0,    81,     0,    81,     0,
    81,     0,    81,     0,     3,    53,   119,     4,     0,    81,
     0,    81,     0,   118,   116,     0,     0,   119,   117,     0,
     0,   120,     3,    59,   150,   149,     4,     0,   120,   143,
     0,   120,   142,     0,     0,   123,   121,     0,   145,   121,
     0,   144,   121,     0,     0,   126,     0,   141,     0,   140,
     0,   145,     0,   144,     0,     3,    46,   125,     4,     0,
   124,     0,   140,     0,   141,     0,   146,     0,   125,   140,
     0,   125,   141,     0,   125,   146,     0,     0,     3,    46,
   121,     4,     0,     3,    46,     1,     4,     0,     3,    46,
   128,     4,     0,     3,   156,     3,   104,     4,   127,     4,
     0,     3,    52,   169,   127,     4,     0,   129,     0,   146,
     0,   128,   127,     0,     0,     3,    43,   130,     4,     0,
     3,    44,   130,     4,     0,     3,    69,   150,   148,     4,
     0,     3,    70,   150,   148,     4,     0,     3,     1,     4,
     0,     3,    46,   132,     4,     0,   131,     0,   140,     0,
   141,     0,   133,     0,   132,   140,     0,   132,   141,     0,
   132,   133,     0,     0,     3,    73,   150,   134,     4,     0,
     3,    69,   150,   134,     4,     0,     3,    70,   150,   134,
     4,     0,     3,    71,   150,   134,     4,     0,     3,    72,
   150,   134,     4,     0,   135,     0,    78,    67,     0,   149,
     0,   150,     0,     3,    86,   134,   134,     4,     0,     3,
    85,   134,   134,     4,     0,     3,    87,   134,   134,     4,
     0,     3,    88,   134,   134,     4,     0,     3,    46,   139,
     4,     0,     3,   137,    78,    67,   138,     4,     0,     3,
    43,     3,   137,    78,    67,   138,     4,     4,     0,     3,
    44,     3,   137,    78,    67,   138,     4,     4,     0,    77,
     0,    75,     0,    59,     0,   147,     0,   139,   136,     0,
     0,     3,    51,   158,     4,     0,   158,     0,     3,    51,
   159,     4,     0,   159,     0,     3,   156,     3,   104,     4,
   122,     4,     0,     3,    52,   153,   121,     4,     0,     3,
    73,   150,   147,     4,     0,     3,    69,   150,   147,     4,
     0,     3,    70,   150,   147,     4,     0,     3,    71,   150,
   147,     4,     0,     3,    72,   150,   147,     4,     0,     3,
    85,   147,     4,     0,     3,    86,   147,   147,     4,     0,
     3,    85,   147,   147,     4,     0,     3,    87,   147,   147,
     4,     0,     3,    88,   147,   147,     4,     0,   149,     0,
   150,     0,     3,    87,    66,   147,     4,     0,     3,    87,
   147,    66,     4,     0,    66,     0,    83,     0,    84,     0,
     3,    82,   110,     4,     0,     3,    81,   110,     4,     0,
    82,     0,     3,    81,   110,     4,     0,    82,     0,    74,
     0,    75,     0,    76,     0,    77,     0,    59,     0,   158,
     0,     3,    51,   153,     4,     0,     3,    46,   154,     4,
     0,     3,    47,   154,     4,     0,     3,    50,   153,   153,
     4,     0,     3,   155,     3,   104,     4,   153,     4,     0,
     3,   152,   147,   147,     4,     0,   154,   153,     0,     0,
   156,     0,   157,     0,    49,     0,    48,     0,     3,    99,
   110,     4,     0,     3,   100,   110,     4,     0,     3,    30,
    96,     4,     0,     3,    30,     1,     4,     0,     3,    31,
   101,     4,     0,     3,    31,     1,     4,     0,   162,   163,
     0,   163,     0,   164,     0,   165,     0,   166,     0,   167,
     0,     3,    25,    81,   172,     3,   104,     4,    34,   153,
    38,   122,     4,     0,     3,    25,     1,     4,     0,     3,
    27,    81,   172,     3,   104,     4,    34,   153,    38,   122,
     4,     0,     3,    27,     1,     4,     0,     3,    26,    81,
   172,     3,   104,     4,    34,   153,    38,   122,     4,     0,
     3,    26,     1,     4,     0,     3,    28,    81,   172,     3,
   104,     4,    42,   136,   168,     4,     0,     3,    28,     1,
     4,     0,   168,    38,   127,     0,   168,    35,   169,     0,
     0,   171,     0,     3,    46,   170,     4,     0,   170,   169,
     0,     0,     3,    43,   153,     4,     0,     3,    44,   153,
     4,     0,     3,    45,   153,     4,     0,    33,     0,    10,
     0,    11,     0,    14,     0,    13,     0,    15,     0,    16,
     0,    17,     0,    19,     0,    20,     0,    22,     0,    21,
     0,    12,     0,    18,     0,    23,     0,    24,     0,    81,
     0,     3,    29,   106,     4,     0,     3,    32,   109,     4,
     0,     3,     7,     3,    54,    81,     4,     3,    55,    81,
     4,   177,     4,     0,     3,     7,     3,    54,     1,     0,
    94,   177,     0,   178,   177,     0,   179,   177,     0,   180,
   177,     0,   181,   177,     0,   182,   177,     0,     0,     3,
    57,   106,     4,     0,     3,    56,   120,     4,     0,     3,
    58,   153,     4,     0,     3,    63,   185,   186,     4,     0,
     3,    63,     1,     4,     0,     3,    60,   183,     4,     0,
     0,    61,    83,   184,    62,    83,     0,    64,     0,    65,
     0,     3,   187,     4,     0,   151,     0,   149,     0,    68,
     0,     3,   186,     4,     0,    86,   186,   186,     0,    85,
   186,   186,     0,    87,   186,   186,     0,    88,   186,   186,
     0,   189,   188,     0,     0,   192,    79,   190,     0,   190,
     0,   191,     5,   192,     6,     0,   191,     0,     3,    81,
   107,     4,     0,    84,     0,    83,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   227,   229,   230,   233,   236,   242,   244,   245,   246,   248,
   250,   253,   257,   265,   271,   273,   277,   280,   284,   287,
   294,   301,   304,   308,   316,   319,   322,   325,   331,   342,
   351,   359,   370,   373,   377,   387,   395,   400,   402,   405,
   407,   413,   422,   430,   436,   439,   441,   446,   452,   456,
   460,   464,   469,   476,   481,   484,   487,   490,   493,   499,
   501,   503,   508,   510,   512,   514,   522,   524,   525,   526,
   527,   530,   532,   535,   538,   540,   546,   548,   549,   551,
   554,   557,   564,   567,   576,   581,   584,   590,   592,   595,
   598,   600,   604,   608,   614,   616,   619,   622,   624,   630,
   632,   633,   635,   639,   642,   644,   646,   648,   652,   654,
   656,   657,   660,   663,   665,   667,   671,   674,   677,   680,
   685,   687,   688,   691,   699,   702,   706,   711,   718,   723,
   728,   734,   739,   742,   744,   746,   748,   752,   755,   757,
   759,   761,   763,   764,   767,   770,   772,   777,   779,   781,
   785,   787,   800,   807,   812,   814,   815,   816,   817,   828,
   831,   835,   837,   840,   843,   846,   851,   854,   858,   860,
   863,   869,   875,   880,   885,   888,   894,   897,   903,   905,
   908,   910,   911,   912,   915,   927,   933,   945,   950,   961,
   966,   982,   988,   991,   993,   996,   999,  1003,  1006,  1010,
  1013,  1015,  1019,  1023,  1025,  1027,  1028,  1030,  1032,  1033,
  1034,  1035,  1036,  1038,  1042,  1051,  1054,  1057,  1059,  1065,
  1069,  1074,  1081,  1087,  1089,  1090,  1091,  1092,  1093,  1094,
  1097,  1100,  1103,  1106,  1109,  1115,  1120,  1122,  1125,  1127,
  1131,  1133,  1134,  1135,  1136,  1139,  1141,  1142,  1143,  1149,
  1153,  1157,  1162,  1167,  1172,  1177,  1185,  1187
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","OPEN_BRAC",
"CLOSE_BRAC","OPEN_SQ","CLOSE_SQ","DEFINE","DOMAIN","REQS","EQUALITY","STRIPS",
"ADL","NEGATIVE_PRECONDITIONS","TYPING","DISJUNCTIVE_PRECONDS","EXT_PRECS","UNIV_PRECS",
"QUANT_PRECS","COND_EFFS","FLUENTS","TIME","DURATIVE_ACTIONS","DURATION_INEQUALITIES",
"CONTINUOUS_EFFECTS","ACTION","PROCESS","EVENT","DURATIVE_ACTION","CONSTANTS",
"PREDS","FUNCTIONS","TYPES","ARGS","PRE","CONDITION","START_PRE","END_PRE","EFFECTS",
"INITIAL_EFFECT","FINAL_EFFECT","INVARIANT","DURATION","AT_START","AT_END","OVER_ALL",
"AND","OR","EXISTS","FORALL","IMPLY","NOT","WHEN","EITHER","PROBLEM","FORDOMAIN",
"INITIALLY","OBJECTS","GOALS","EQ","LENGTH","SERIAL","PARALLEL","METRIC","MINIMIZE",
"MAXIMIZE","HASHT","DURATION_VAR","TOTAL_TIME","INCREASE","DECREASE","SCALE_UP",
"SCALE_DOWN","ASSIGN","GREATER","GREATEQ","LESS","LESSEQ","Q","COLON","BOGUS",
"NAME","FUNCTION_SYMBOL","INTVAL","FLOATVAL","HYPHEN","PLUS","MUL","DIV","UMINUS",
"mystartsymbol","c_domain","c_preamble","c_domain_name","c_domain_require_def",
"c_reqs","c_pred_decls","c_pred_decl","c_new_pred_symbol","c_pred_symbol","c_init_pred_symbol",
"c_func_decls","c_func_decl","c_new_func_symbol","c_typed_var_list","c_var_symbol_list",
"c_typed_consts","c_const_symbols","c_new_const_symbols","c_typed_types","c_parameter_symbols",
"c_declaration_var_symbol","c_var_symbol","c_const_symbol","c_new_const_symbol",
"c_either_type","c_new_primitive_type","c_primitive_type","c_new_primitive_types",
"c_primitive_types","c_init_els","c_effects","c_effect","c_a_effect","c_p_effect",
"c_p_effects","c_conj_effect","c_da_effect","c_da_effects","c_timed_effect",
"c_a_effect_da","c_p_effect_da","c_p_effects_da","c_f_assign_da","c_f_exp_da",
"c_binary_expr_da","c_duration_constraint","c_d_op","c_d_value","c_duration_constraints",
"c_neg_simple_effect","c_pos_simple_effect","c_init_neg_simple_effect","c_init_pos_simple_effect",
"c_forall_effect","c_cond_effect","c_assignment","c_f_exp","c_f_exp_t","c_number",
"c_f_head","c_ground_f_head","c_comparison_op","c_goal_descriptor","c_goal_list",
"c_quantifier","c_forall","c_exists","c_proposition","c_init_proposition","c_predicates",
"c_functions_def","c_structure_defs","c_structure_def","c_action_def","c_event_def",
"c_process_def","c_durative_action_def","c_da_def_body","c_da_gd","c_da_gds",
"c_timed_gd","c_args_head","c_require_key","c_domain_constants","c_type_names",
"c_problem","c_problem_body","c_objects","c_initial_state","c_goal_spec","c_metric_spec",
"c_length_spec","c_length_field","@1","c_optimization","c_ground_f_exp","c_binary_ground_f_exp",
"c_plan","c_step_t_d","c_step_d","c_step","c_float", NULL
};
#endif

static const short yyr1[] = {     0,
    90,    90,    90,    91,    91,    92,    92,    92,    92,    92,
    92,    93,    94,    94,    95,    95,    96,    96,    97,    97,
    98,    99,    99,   100,   101,   101,   102,   102,   103,   104,
   104,   104,   105,   105,   106,   106,   106,   107,   107,   108,
   108,   109,   109,   109,   110,   110,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   118,   119,   119,   120,   120,
   120,   120,   121,   121,   121,   121,   122,   122,   122,   122,
   122,   123,   123,   124,   124,   124,   125,   125,   125,   125,
   126,   126,   127,   127,   127,   127,   127,   128,   128,   129,
   129,   129,   129,   129,   130,   130,   131,   131,   131,   132,
   132,   132,   132,   133,   133,   133,   133,   133,   134,   134,
   134,   134,   135,   135,   135,   135,   136,   136,   136,   136,
   137,   137,   137,   138,   139,   139,   140,   141,   142,   143,
   144,   145,   146,   146,   146,   146,   146,   147,   147,   147,
   147,   147,   147,   147,   148,   148,   148,   149,   149,   150,
   150,   150,   151,   151,   152,   152,   152,   152,   152,   153,
   153,   153,   153,   153,   153,   153,   154,   154,   155,   155,
   156,   157,   158,   159,   160,   160,   161,   161,   162,   162,
   163,   163,   163,   163,   164,   164,   165,   165,   166,   166,
   167,   167,   168,   168,   168,   169,   169,   170,   170,   171,
   171,   171,   172,   173,   173,   173,   173,   173,   173,   173,
   173,   173,   173,   173,   173,   173,   173,   173,   173,   174,
   175,   176,   176,   177,   177,   177,   177,   177,   177,   177,
   178,   179,   180,   181,   181,   182,   184,   183,   185,   185,
   186,   186,   186,   186,   186,   187,   187,   187,   187,   188,
   188,   189,   189,   190,   190,   191,   192,   192
};

static const short yyr2[] = {     0,
     1,     1,     1,     5,     4,     2,     2,     2,     2,     2,
     1,     4,     4,     4,     2,     0,     2,     1,     4,     3,
     1,     1,     1,     1,     2,     0,     4,     3,     1,     4,
     4,     1,     3,     0,     4,     4,     1,     2,     0,     2,
     0,     4,     4,     1,     2,     3,     0,     1,     1,     1,
     1,     4,     1,     1,     2,     0,     2,     0,     6,     2,
     2,     0,     2,     2,     2,     0,     1,     1,     1,     1,
     1,     4,     1,     1,     1,     1,     2,     2,     2,     0,
     4,     4,     4,     7,     5,     1,     1,     2,     0,     4,
     4,     5,     5,     3,     4,     1,     1,     1,     1,     2,
     2,     2,     0,     5,     5,     5,     5,     5,     1,     2,
     1,     1,     5,     5,     5,     5,     4,     6,     9,     9,
     1,     1,     1,     1,     2,     0,     4,     1,     4,     1,
     7,     5,     5,     5,     5,     5,     5,     4,     5,     5,
     5,     5,     1,     1,     5,     5,     1,     1,     1,     4,
     4,     1,     4,     1,     1,     1,     1,     1,     1,     1,
     4,     4,     4,     5,     7,     5,     2,     0,     1,     1,
     1,     1,     4,     4,     4,     4,     4,     4,     2,     1,
     1,     1,     1,     1,    12,     4,    12,     4,    12,     4,
    11,     4,     3,     3,     0,     1,     4,     2,     0,     4,
     4,     4,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     4,
     4,    12,     5,     2,     2,     2,     2,     2,     2,     0,
     4,     4,     4,     5,     4,     4,     0,     5,     1,     1,
     3,     1,     1,     1,     3,     3,     3,     3,     3,     2,
     0,     3,     1,     4,     1,     4,     1,     1
};

static const short yydefact[] = {   251,
     0,   258,   257,     1,     2,     3,   251,   253,   255,     0,
     0,    39,     0,   250,     0,     0,     0,     0,    50,     0,
    39,     0,   252,     0,     0,     5,     0,     0,     0,     0,
     0,    11,   180,   181,   182,   183,   184,     0,     0,   256,
    38,   254,     0,   223,     0,     0,     0,     0,     0,     0,
    41,     0,     0,    56,     4,     6,     9,    10,     0,   179,
     8,     7,    12,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    51,     0,    37,    41,     0,     0,
     0,    18,     0,     0,     0,    44,     0,    14,    13,   204,
   205,   215,   207,   206,   208,   209,   210,   216,   211,   212,
   214,   213,   217,   218,   219,    15,   186,   203,     0,   190,
     0,   188,     0,   192,     0,   220,     0,    40,   176,     0,
    21,    34,   175,    17,   178,     0,   177,    25,   221,    53,
     0,    55,     0,    34,    34,    34,    34,     0,    54,    41,
    41,    20,     0,     0,    32,     0,    29,    34,    56,    56,
     0,     0,     0,     0,     0,    58,    36,    35,    48,    34,
    19,     0,    28,     0,    43,    42,   230,     0,     0,     0,
     0,     0,    33,    34,    34,    27,     0,   230,     0,   230,
   230,   230,   230,   230,     0,     0,     0,     0,    52,    57,
    31,    30,    62,    41,     0,     0,     0,   224,   222,   225,
   226,   227,   228,   229,     0,     0,   160,     0,     0,     0,
   195,     0,     0,     0,     0,     0,     0,   239,   240,     0,
   168,   168,   172,   171,     0,     0,   159,   155,   156,   157,
   158,    23,    47,     0,     0,   169,   170,     0,     0,     0,
     0,     0,   126,   123,   122,   121,     0,     0,     0,   232,
    61,    60,   130,   231,   233,   237,   236,   235,     0,   244,
   154,   148,   149,   243,   242,     0,     0,     0,     0,     0,
     0,     0,   152,     0,   143,   144,    34,     0,     0,    67,
    69,    68,    71,    70,   128,     0,     0,     0,     0,     0,
     0,   191,     0,     0,     0,     0,    24,    47,     0,    47,
     0,     0,     0,     0,     0,     0,   234,   162,   167,   163,
     0,   161,   173,     0,    45,    47,    47,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    22,     0,   185,   189,
   187,     0,     0,   117,   125,     0,     0,   194,   196,     0,
   193,    86,    87,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   245,   241,   164,    49,    46,     0,
     0,     0,     0,     0,     0,   166,     0,     0,     0,     0,
    66,    73,    74,    75,    66,    66,    76,     0,     0,    66,
    34,     0,     0,     0,   124,     0,     0,     0,   199,     0,
     0,     0,    89,     0,     0,     0,     0,     0,     0,     0,
   129,     0,   174,   238,   153,   247,   246,   248,   249,   151,
   150,   138,     0,     0,     0,     0,     0,    82,    80,     0,
     0,    81,    63,    65,    64,   127,     0,     0,     0,     0,
   118,     0,     0,     0,     0,    94,     0,     0,    96,    99,
    97,    98,     0,     0,     0,     0,     0,     0,     0,     0,
    34,    59,   140,   139,   141,   142,   165,     0,     0,     0,
   132,     0,     0,     0,   200,   201,   202,   197,   198,   103,
     0,     0,     0,     0,     0,    90,    91,    83,    88,     0,
     0,   147,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    72,    77,    78,    79,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    85,     0,   134,    92,   135,    93,
   136,   137,   133,     0,   131,   119,   120,     0,    95,   102,
   100,   101,     0,     0,     0,   109,   111,   112,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   110,
   105,   106,   107,   108,   104,     0,     0,    84,     0,     0,
     0,     0,   145,   146,     0,     0,     0,     0,   114,   113,
   115,   116,     0,     0,     0
};

static const short yydefgoto[] = {   563,
     4,    28,    18,   178,    66,    81,    82,   122,   233,   298,
    84,   128,   148,   144,   145,    76,    20,    77,    85,   271,
   160,   359,   315,    78,   140,   132,   141,    86,   172,   212,
   370,   279,   371,   372,   458,   280,   341,   444,   342,   438,
   439,   499,   440,   525,   526,   211,   247,   384,   290,   373,
   374,   251,   252,   375,   376,   377,   385,   484,   275,   276,
   265,   234,   309,   267,   235,   328,   237,   207,   253,    30,
    31,    32,    33,    34,    35,    36,    37,   248,   338,   435,
   339,   109,   106,    38,    39,     5,   179,   180,   181,   182,
   183,   184,   216,   299,   220,   266,   306,     6,     7,     8,
     9,    10
};

static const short yypact[] = {    42,
     9,-32768,-32768,-32768,-32768,-32768,    56,-32768,    95,   -18,
    71,    22,   113,-32768,   -26,   210,    32,   240,-32768,   225,
    22,   232,-32768,   161,    61,-32768,   509,   242,   269,   269,
   269,   275,-32768,-32768,-32768,-32768,-32768,   269,   269,-32768,
-32768,-32768,   283,-32768,   285,   323,    69,    98,   101,   103,
   224,   255,   383,-32768,-32768,-32768,-32768,-32768,   325,-32768,
-32768,-32768,-32768,   318,   324,   344,   365,   345,   381,   345,
   391,   345,   412,   345,-32768,   418,   339,   224,   425,   104,
   444,   447,   456,    84,   457,   -39,   411,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   465,-32768,
   468,-32768,   471,-32768,   472,-32768,    68,-32768,-32768,   473,
-32768,   398,-32768,-32768,-32768,   105,-32768,-32768,-32768,-32768,
    68,-32768,   397,   398,   398,   398,   398,   426,-32768,   224,
   224,-32768,   403,   482,   404,   484,-32768,   398,-32768,-32768,
   492,   493,   495,   496,   497,-32768,-32768,-32768,-32768,   398,
-32768,    68,-32768,   500,-32768,-32768,   507,   478,   479,   481,
   477,    81,-32768,   398,   398,-32768,   370,   507,   516,   507,
   507,   507,   507,   507,   523,   523,   523,   524,-32768,-32768,
-32768,-32768,-32768,   224,   523,   467,     1,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   388,   491,-32768,   494,   506,   439,
-32768,   197,   526,   527,   462,   548,   549,-32768,-32768,    27,
-32768,-32768,-32768,-32768,   523,   523,    94,-32768,-32768,-32768,
-32768,-32768,-32768,    46,   556,-32768,-32768,   562,   562,   562,
   563,   564,-32768,-32768,-32768,-32768,   490,    37,   159,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    73,-32768,
-32768,-32768,-32768,-32768,-32768,   565,   213,   262,   523,   566,
   186,   295,-32768,    46,-32768,-32768,   398,   400,   567,-32768,
-32768,-32768,-32768,-32768,-32768,   568,   569,   132,   132,   297,
   508,-32768,   571,   573,   574,    -2,-32768,-32768,   517,-32768,
    27,    27,    27,    27,   576,   577,-32768,-32768,-32768,-32768,
   578,-32768,-32768,   502,-32768,-32768,-32768,    46,    46,    46,
    46,   580,   581,   395,   575,   523,-32768,   583,-32768,-32768,
-32768,   510,   511,-32768,-32768,    46,     7,-32768,-32768,   348,
-32768,-32768,-32768,   512,   586,   107,   227,   231,   504,   292,
    27,    27,    27,    27,-32768,-32768,-32768,-32768,-32768,   293,
   294,    30,    46,    46,    46,-32768,   523,   587,   421,   588,
   591,-32768,-32768,-32768,   591,   591,-32768,   -21,   592,   591,
   398,   528,   530,   594,-32768,   523,   523,   523,-32768,   595,
   597,   597,-32768,   571,    -2,    -2,    -2,    -2,    -2,   598,
-32768,   599,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   600,   601,   602,   603,   604,-32768,-32768,    -2,
    -2,-32768,-32768,-32768,-32768,-32768,   605,   606,    46,    46,
-32768,   607,   608,   609,   322,-32768,   342,   610,-32768,-32768,
-32768,-32768,   611,   386,   573,   121,   121,    46,    46,    46,
   398,-32768,-32768,-32768,-32768,-32768,-32768,   399,    46,    46,
-32768,   562,   612,   613,-32768,-32768,-32768,-32768,-32768,-32768,
    -2,    -2,    -2,    -2,    -2,-32768,-32768,-32768,-32768,   614,
   461,-32768,   615,   616,   617,   618,   619,   620,   621,   622,
   436,-32768,-32768,-32768,-32768,   623,   624,   625,   406,   208,
   208,   208,   208,   208,-32768,   170,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   573,-32768,-32768,-32768,   452,-32768,-32768,
-32768,-32768,   469,   535,   626,-32768,-32768,-32768,   627,   628,
   629,   630,    46,   211,   631,   208,   208,   208,   208,-32768,
-32768,-32768,-32768,-32768,-32768,   632,   633,-32768,   208,   208,
   208,   208,-32768,-32768,   634,   635,   636,   637,-32768,-32768,
-32768,-32768,   642,   643,-32768
};

static const short yypgoto[] = {-32768,
-32768,    25,-32768,   284,-32768,   570,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  -131,   485,  -105,   638,   572,   282,  -124,
-32768,-32768,   194,-32768,   -83,-32768,    40,-32768,-32768,-32768,
   -72,  -231,-32768,-32768,-32768,-32768,  -413,-32768,-32768,   252,
-32768,-32768,   147,   -96,-32768,   357,   156,    28,-32768,  -214,
  -211,-32768,-32768,  -225,  -217,  -275,  -227,   201,  -220,  -276,
-32768,-32768,  -118,   427,-32768,  -187,-32768,  -228,   356,-32768,
-32768,-32768,   639,-32768,-32768,-32768,-32768,-32768,  -357,-32768,
-32768,   185,-32768,-32768,-32768,-32768,   380,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  -186,-32768,   646,-32768,   640,
-32768,   645
};


#define	YYLAST		671


static const short yytable[] = {   264,
   346,   217,   152,   153,   154,   155,   274,   286,   287,   285,
   285,   285,   283,   283,   283,    11,   164,   236,   343,   347,
   284,   284,   284,   281,   281,   281,   282,   282,   282,   259,
   479,   480,   272,   412,   157,   158,   445,   327,   264,    24,
   292,   130,   191,   192,     1,   131,   322,   149,   272,   386,
   387,   388,   389,    56,    57,    58,     2,     3,    13,   232,
    16,    44,    61,    62,   218,   219,   206,   208,   209,    67,
   138,   293,   305,    17,   294,   259,   214,   469,   174,   273,
   264,   264,   264,   264,   189,    25,   126,   127,   213,    12,
   362,   363,   364,   365,   260,   285,   379,   -22,    69,    15,
   535,    71,    19,    73,   120,   146,   269,   270,   261,   262,
   263,   273,   262,   263,   351,   352,   353,   354,   446,   447,
   448,   449,   450,   481,     2,     3,   402,   273,   262,   263,
   264,   264,   264,   264,   413,   414,   415,   416,     2,     3,
   260,    45,   285,   459,   460,   323,   285,   285,   139,    68,
   311,   285,   400,   300,   261,   262,   263,   301,   302,   303,
   304,   139,   285,   285,   406,   407,   408,   409,   343,   343,
   150,   -22,   272,   348,   -22,   350,   441,   441,    70,   442,
   442,    72,   495,    74,   121,   147,   482,   316,   317,   313,
   244,   360,   361,    12,   500,   501,   502,   503,   504,   249,
   250,   175,   273,   262,   263,    21,   245,   380,   246,   295,
   523,   190,    13,   272,    21,   205,   308,   296,   483,   485,
   487,   488,   489,   528,   528,   528,   528,   528,    40,   285,
   496,   483,   485,   285,   403,   533,   283,    42,   343,   297,
    26,    43,    27,   493,   284,    55,   494,   281,   417,   428,
   282,   273,   262,   263,   111,    79,   113,    80,   115,   528,
   528,   528,   528,   314,   205,   310,    19,   432,   433,   434,
   285,    27,   528,   528,   528,   528,   547,    59,   534,   527,
   527,   527,   527,   527,   521,   524,    63,   522,    64,   273,
   262,   263,   273,   262,   263,   405,   410,   411,   423,   210,
   334,    29,   424,   425,    75,   546,   415,   427,   314,   262,
   263,    19,    29,    29,    29,   527,   527,   527,   527,   490,
    87,    29,    29,    65,   337,   468,   -16,    88,   527,   527,
   527,   527,   -16,   -16,   -16,   -16,   -16,   -16,   -16,   -16,
   -16,   -16,   -16,   -16,   -16,   -16,   -16,    89,   390,    47,
    48,    49,    50,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   107,   314,
   314,   314,    19,    19,    19,   316,   317,   108,    46,   318,
   319,   320,   321,    83,   110,   -26,   -26,   470,   340,   478,
   391,   392,   325,   393,   112,   368,   224,   369,   -66,   394,
   327,   491,   492,   -16,   529,   530,   531,   532,   518,   519,
   471,   472,   473,   474,   475,   114,   395,   396,   397,   398,
   399,   116,   232,   117,   105,   193,   194,   195,   119,   196,
   165,   166,   197,   221,   222,   223,   224,   225,   226,   549,
   550,   551,   552,   332,   333,   324,   227,   123,   224,    80,
   325,   326,   555,   556,   557,   558,   463,   464,   327,   125,
   129,   228,   229,   230,   231,   133,   419,   134,   232,   224,
   135,   325,   326,   136,   137,   143,   142,   151,   156,   327,
   232,   241,   242,   159,   243,   161,   325,   163,   162,   420,
   421,   397,   398,   399,   327,   167,   168,   244,   169,   170,
   171,   232,   325,   176,   420,   421,   397,   398,   399,   177,
   327,   185,   186,   245,   187,   246,   232,    46,   188,   199,
   471,   472,   473,   474,   475,   205,   210,   215,   238,   254,
   255,   239,   232,    47,    48,    49,    50,    51,    52,    53,
    54,   316,   317,   240,   256,   318,   319,   506,   321,   316,
   317,   257,   258,   536,   537,   538,   539,   198,   277,   200,
   201,   202,   203,   204,   278,   288,   289,   291,   307,   312,
   329,   330,   331,   337,   336,   340,   344,   378,   349,   355,
   356,   357,   358,   366,   367,   381,   404,   382,   383,   401,
   418,   422,   297,   369,   429,   426,   430,   431,   436,   437,
   451,   540,   452,   453,   454,   455,   456,   457,   461,   462,
   465,   466,   467,   476,   477,   497,   498,   505,   507,   508,
   509,   510,   511,   512,   513,   514,   515,   516,   517,   541,
   542,   543,   544,   545,   548,   553,   554,   559,   560,   561,
   562,   564,   565,   443,   173,   520,   335,   486,   268,   118,
   345,   124,    14,     0,     0,    23,     0,     0,    41,    22,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    60
};

static const short yycheck[] = {   220,
     3,     1,   134,   135,   136,   137,   234,   239,   240,   238,
   239,   240,   238,   239,   240,     7,   148,   205,   294,   296,
   238,   239,   240,   238,   239,   240,   238,   239,   240,     3,
   444,   445,     3,     4,   140,   141,   394,    59,   259,     8,
     4,    81,   174,   175,     3,    85,   274,   131,     3,    43,
    44,    45,    46,    29,    30,    31,    83,    84,     3,    81,
    79,     1,    38,    39,    64,    65,   185,   186,   187,     1,
     3,    35,   259,     3,    38,     3,   195,   435,   162,    82,
   301,   302,   303,   304,     4,    54,     3,     4,   194,    81,
   318,   319,   320,   321,    68,   324,   325,     4,     1,     5,
   514,     1,    81,     1,     1,     1,   225,   226,    82,    83,
    84,    82,    83,    84,   301,   302,   303,   304,   395,   396,
   397,   398,   399,     3,    83,    84,   347,    82,    83,    84,
   351,   352,   353,   354,   362,   363,   364,   365,    83,    84,
    68,    81,   371,   420,   421,   277,   375,   376,    81,    81,
   269,   380,   340,    81,    82,    83,    84,    85,    86,    87,
    88,    81,   391,   392,   351,   352,   353,   354,   444,   445,
   131,    78,     3,   298,    81,   300,   391,   392,    81,   391,
   392,    81,   458,    81,    81,    81,    66,    81,    82,     4,
    59,   316,   317,    81,   471,   472,   473,   474,   475,     3,
     4,   162,    82,    83,    84,    12,    75,   326,    77,    51,
     3,   172,     3,     3,    21,     3,     4,    59,   446,   447,
   448,   449,   450,   500,   501,   502,   503,   504,     4,   458,
   462,   459,   460,   462,     4,    66,   462,     6,   514,    81,
     1,    81,     3,   458,   462,     4,   458,   462,   367,   381,
   462,    82,    83,    84,    70,     1,    72,     3,    74,   536,
   537,   538,   539,    78,     3,     4,    81,   386,   387,   388,
   499,     3,   549,   550,   551,   552,    66,     3,   506,   500,
   501,   502,   503,   504,   499,    78,     4,   499,     4,    82,
    83,    84,    82,    83,    84,     4,     4,     4,   371,     3,
     4,    18,   375,   376,    81,   533,   534,   380,    78,    83,
    84,    81,    29,    30,    31,   536,   537,   538,   539,   451,
     3,    38,    39,     1,     3,     4,     4,     4,   549,   550,
   551,   552,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,     4,     1,    25,
    26,    27,    28,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,     4,    78,
    78,    78,    81,    81,    81,    81,    82,    33,     9,    85,
    86,    87,    88,     1,     4,     3,     4,    46,     3,     4,
    43,    44,    51,    46,     4,     1,    49,     3,     4,    52,
    59,     3,     4,    81,   501,   502,   503,   504,     3,     4,
    69,    70,    71,    72,    73,     4,    69,    70,    71,    72,
    73,     4,    81,    85,    81,    56,    57,    58,     4,    60,
   149,   150,    63,    46,    47,    48,    49,    50,    51,   536,
   537,   538,   539,   288,   289,    46,    59,     4,    49,     3,
    51,    52,   549,   550,   551,   552,   429,   430,    59,     4,
     4,    74,    75,    76,    77,    55,    46,     3,    81,    49,
     3,    51,    52,     3,     3,    78,     4,    81,    53,    59,
    81,    43,    44,    81,    46,     4,    51,     4,    85,    69,
    70,    71,    72,    73,    59,     4,     4,    59,     4,     4,
     4,    81,    51,     4,    69,    70,    71,    72,    73,     3,
    59,    34,    34,    75,    34,    77,    81,     9,    42,     4,
    69,    70,    71,    72,    73,     3,     3,    61,    38,     4,
     4,    38,    81,    25,    26,    27,    28,    29,    30,    31,
    32,    81,    82,    38,    83,    85,    86,    87,    88,    81,
    82,     4,     4,    85,    86,    87,    88,   178,     3,   180,
   181,   182,   183,   184,     3,     3,     3,    78,     4,     4,
     4,     4,     4,     3,    67,     3,     3,     3,    62,     4,
     4,     4,    81,     4,     4,     3,    83,    78,    78,     4,
     4,     4,    81,     3,    67,     4,    67,     4,     4,     3,
     3,    67,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     0,     0,   392,   160,   499,   290,   447,   222,    78,
   295,    82,     7,    -1,    -1,    16,    -1,    -1,    21,    15,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    32
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 228 "pddl+.yacc"
{top_thing= yyvsp[0].t_domain; current_analysis->the_domain= yyvsp[0].t_domain;;
    break;}
case 2:
#line 229 "pddl+.yacc"
{top_thing= yyvsp[0].t_problem; current_analysis->the_problem= yyvsp[0].t_problem;;
    break;}
case 3:
#line 230 "pddl+.yacc"
{top_thing= yyvsp[0].t_plan; ;
    break;}
case 4:
#line 235 "pddl+.yacc"
{yyval.t_domain= yyvsp[-1].t_domain; yyval.t_domain->name= yyvsp[-2].cp;delete [] yyvsp[-2].cp;;
    break;}
case 5:
#line 237 "pddl+.yacc"
{yyerrok; yyval.t_domain=static_cast<domain*>(NULL);
       	log_error(E_FATAL,"Syntax error in domain"); ;
    break;}
case 6:
#line 243 "pddl+.yacc"
{yyval.t_domain= yyvsp[0].t_domain; yyval.t_domain->req= yyvsp[-1].t_pddl_req_flag;;
    break;}
case 7:
#line 244 "pddl+.yacc"
{yyval.t_domain= yyvsp[0].t_domain; yyval.t_domain->types= yyvsp[-1].t_type_list;;
    break;}
case 8:
#line 245 "pddl+.yacc"
{yyval.t_domain= yyvsp[0].t_domain; yyval.t_domain->constants= yyvsp[-1].t_const_symbol_list;;
    break;}
case 9:
#line 246 "pddl+.yacc"
{yyval.t_domain= yyvsp[0].t_domain; 
                                       yyval.t_domain->predicates= yyvsp[-1].t_pred_decl_list; ;
    break;}
case 10:
#line 248 "pddl+.yacc"
{yyval.t_domain= yyvsp[0].t_domain; 
                                       yyval.t_domain->functions= yyvsp[-1].t_func_decl_list; ;
    break;}
case 11:
#line 250 "pddl+.yacc"
{yyval.t_domain= new domain(yyvsp[0].t_operator_list); ;
    break;}
case 12:
#line 253 "pddl+.yacc"
{yyval.cp=yyvsp[-1].cp;;
    break;}
case 13:
#line 259 "pddl+.yacc"
{
	// Stash in analysis object --- we need to refer to it during parse
	//   but domain object is not created yet,
	current_analysis->req= yyvsp[-1].t_pddl_req_flag;
	yyval.t_pddl_req_flag=yyvsp[-1].t_pddl_req_flag;
    ;
    break;}
case 14:
#line 266 "pddl+.yacc"
{yyerrok; 
       log_error(E_FATAL,"Syntax error in requirements declaration.");
       yyval.t_pddl_req_flag= 0; ;
    break;}
case 15:
#line 272 "pddl+.yacc"
{ yyval.t_pddl_req_flag= yyvsp[-1].t_pddl_req_flag | yyvsp[0].t_pddl_req_flag; ;
    break;}
case 16:
#line 273 "pddl+.yacc"
{ yyval.t_pddl_req_flag= 0; ;
    break;}
case 17:
#line 279 "pddl+.yacc"
{yyval.t_pred_decl_list=yyvsp[0].t_pred_decl_list; yyval.t_pred_decl_list->push_front(yyvsp[-1].t_pred_decl);;
    break;}
case 18:
#line 281 "pddl+.yacc"
{  yyval.t_pred_decl_list=new pred_decl_list;
           yyval.t_pred_decl_list->push_front(yyvsp[0].t_pred_decl); ;
    break;}
case 19:
#line 286 "pddl+.yacc"
{yyval.t_pred_decl= new pred_decl(yyvsp[-2].t_pred_symbol,yyvsp[-1].t_var_symbol_list,current_analysis->var_tab_stack.pop());;
    break;}
case 20:
#line 288 "pddl+.yacc"
{yyerrok; 
        // hope someone makes this error someday
        log_error(E_FATAL,"Syntax error in predicate declaration.");
	yyval.t_pred_decl= NULL; ;
    break;}
case 21:
#line 296 "pddl+.yacc"
{ yyval.t_pred_symbol=current_analysis->pred_tab.symbol_put(yyvsp[0].cp);
           current_analysis->var_tab_stack.push(new var_symbol_table);
           delete [] yyvsp[0].cp; ;
    break;}
case 22:
#line 302 "pddl+.yacc"
{ yyval.t_pred_symbol=current_analysis->pred_tab.symbol_ref("="); 
	      requires(E_EQUALITY); ;
    break;}
case 23:
#line 304 "pddl+.yacc"
{ yyval.t_pred_symbol=current_analysis->pred_tab.symbol_get(yyvsp[0].cp); delete [] yyvsp[0].cp; ;
    break;}
case 24:
#line 312 "pddl+.yacc"
{ yyval.t_pred_symbol=current_analysis->pred_tab.symbol_get(yyvsp[0].cp); delete [] yyvsp[0].cp;;
    break;}
case 25:
#line 318 "pddl+.yacc"
{yyval.t_func_decl_list=yyvsp[-1].t_func_decl_list; yyval.t_func_decl_list->push_back(yyvsp[0].t_func_decl);;
    break;}
case 26:
#line 319 "pddl+.yacc"
{ yyval.t_func_decl_list=new func_decl_list; ;
    break;}
case 27:
#line 324 "pddl+.yacc"
{yyval.t_func_decl= new func_decl(yyvsp[-2].t_func_symbol,yyvsp[-1].t_var_symbol_list,current_analysis->var_tab_stack.pop());;
    break;}
case 28:
#line 326 "pddl+.yacc"
{yyerrok; 
	 log_error(E_FATAL,"Syntax error in functor declaration.");
	 yyval.t_func_decl= NULL; ;
    break;}
case 29:
#line 333 "pddl+.yacc"
{ yyval.t_func_symbol=current_analysis->func_tab.symbol_put(yyvsp[0].cp);
           current_analysis->var_tab_stack.push(new var_symbol_table); delete [] yyvsp[0].cp; ;
    break;}
case 30:
#line 344 "pddl+.yacc"
{  
      yyval.t_var_symbol_list= yyvsp[-3].t_var_symbol_list;
      yyval.t_var_symbol_list->set_types(yyvsp[-1].t_type);           /* Set types for variables */
      yyval.t_var_symbol_list->splice(yyval.t_var_symbol_list->end(),*yyvsp[0].t_var_symbol_list);   /* Join lists */ 
      delete yyvsp[0].t_var_symbol_list;                   /* Delete (now empty) list */
      requires(E_TYPING);
   ;
    break;}
case 31:
#line 352 "pddl+.yacc"
{  
      yyval.t_var_symbol_list= yyvsp[-3].t_var_symbol_list;
      yyval.t_var_symbol_list->set_either_types(yyvsp[-1].t_type_list);    /* Set types for variables */
      yyval.t_var_symbol_list->splice(yyval.t_var_symbol_list->end(),*yyvsp[0].t_var_symbol_list);   /* Join lists */ 
      delete yyvsp[0].t_var_symbol_list;                   /* Delete (now empty) list */
      requires(E_TYPING);
   ;
    break;}
case 32:
#line 360 "pddl+.yacc"
{
       yyval.t_var_symbol_list= yyvsp[0].t_var_symbol_list;
   ;
    break;}
case 33:
#line 372 "pddl+.yacc"
{yyval.t_var_symbol_list=yyvsp[0].t_var_symbol_list; yyvsp[0].t_var_symbol_list->push_front(yyvsp[-1].t_var_symbol); ;
    break;}
case 34:
#line 373 "pddl+.yacc"
{yyval.t_var_symbol_list= new var_symbol_list; ;
    break;}
case 35:
#line 380 "pddl+.yacc"
{  
      yyval.t_const_symbol_list= yyvsp[-3].t_const_symbol_list;
      yyvsp[-3].t_const_symbol_list->set_types(yyvsp[-1].t_type);           /* Set types for constants */
      yyvsp[-3].t_const_symbol_list->splice(yyvsp[-3].t_const_symbol_list->end(),*yyvsp[0].t_const_symbol_list); /* Join lists */ 
      delete yyvsp[0].t_const_symbol_list;                   /* Delete (now empty) list */
      requires(E_TYPING);
   ;
    break;}
case 36:
#line 388 "pddl+.yacc"
{  
      yyval.t_const_symbol_list= yyvsp[-3].t_const_symbol_list;
      yyvsp[-3].t_const_symbol_list->set_either_types(yyvsp[-1].t_type_list);
      yyvsp[-3].t_const_symbol_list->splice(yyvsp[-3].t_const_symbol_list->end(),*yyvsp[0].t_const_symbol_list);
      delete yyvsp[0].t_const_symbol_list;
      requires(E_TYPING);
   ;
    break;}
case 37:
#line 396 "pddl+.yacc"
{yyval.t_const_symbol_list= yyvsp[0].t_const_symbol_list;
    break;}
case 38:
#line 401 "pddl+.yacc"
{yyval.t_const_symbol_list=yyvsp[0].t_const_symbol_list; yyvsp[0].t_const_symbol_list->push_front(yyvsp[-1].t_const_symbol);;
    break;}
case 39:
#line 402 "pddl+.yacc"
{yyval.t_const_symbol_list=new const_symbol_list;;
    break;}
case 40:
#line 406 "pddl+.yacc"
{yyval.t_const_symbol_list=yyvsp[0].t_const_symbol_list; yyvsp[0].t_const_symbol_list->push_front(yyvsp[-1].t_const_symbol);;
    break;}
case 41:
#line 407 "pddl+.yacc"
{yyval.t_const_symbol_list=new const_symbol_list;;
    break;}
case 42:
#line 416 "pddl+.yacc"
{  
       yyval.t_type_list= yyvsp[-3].t_type_list;
       yyval.t_type_list->set_types(yyvsp[-1].t_type);           /* Set types for constants */
       yyval.t_type_list->splice(yyval.t_type_list->end(),*yyvsp[0].t_type_list); /* Join lists */ 
       delete yyvsp[0].t_type_list;                   /* Delete (now empty) list */
   ;
    break;}
case 43:
#line 423 "pddl+.yacc"
{  
   // This parse needs to be excluded, we think (DPL&MF: 6/9/01)
       yyval.t_type_list= yyvsp[-3].t_type_list;
       yyval.t_type_list->set_either_types(yyvsp[-1].t_type_list);
       yyval.t_type_list->splice(yyvsp[-3].t_type_list->end(),*yyvsp[0].t_type_list);
       delete yyvsp[0].t_type_list;
   ;
    break;}
case 44:
#line 432 "pddl+.yacc"
{ yyval.t_type_list= yyvsp[0].t_type_list; ;
    break;}
case 45:
#line 438 "pddl+.yacc"
{yyval.t_parameter_symbol_list=yyvsp[-1].t_parameter_symbol_list; yyval.t_parameter_symbol_list->push_back(yyvsp[0].t_const_symbol); ;
    break;}
case 46:
#line 440 "pddl+.yacc"
{yyval.t_parameter_symbol_list=yyvsp[-2].t_parameter_symbol_list; yyval.t_parameter_symbol_list->push_back(yyvsp[0].t_var_symbol); ;
    break;}
case 47:
#line 441 "pddl+.yacc"
{yyval.t_parameter_symbol_list= new parameter_symbol_list;
    break;}
case 48:
#line 447 "pddl+.yacc"
{ yyval.t_var_symbol= current_analysis->var_tab_stack.top()->symbol_put(yyvsp[0].cp); delete [] yyvsp[0].cp; ;
    break;}
case 49:
#line 453 "pddl+.yacc"
{ yyval.t_var_symbol= current_analysis->var_tab_stack.symbol_get(yyvsp[0].cp); delete [] yyvsp[0].cp; ;
    break;}
case 50:
#line 457 "pddl+.yacc"
{ yyval.t_const_symbol= current_analysis->const_tab.symbol_get(yyvsp[0].cp); delete [] yyvsp[0].cp; ;
    break;}
case 51:
#line 461 "pddl+.yacc"
{ yyval.t_const_symbol= current_analysis->const_tab.symbol_put(yyvsp[0].cp); delete [] yyvsp[0].cp;;
    break;}
case 52:
#line 466 "pddl+.yacc"
{ yyval.t_type_list= yyvsp[-1].t_type_list ;
    break;}
case 53:
#line 471 "pddl+.yacc"
{ yyval.t_type= current_analysis->pddl_type_tab.symbol_ref(yyvsp[0].cp); delete [] yyvsp[0].cp;;
    break;}
case 54:
#line 478 "pddl+.yacc"
{ yyval.t_type= current_analysis->pddl_type_tab.symbol_ref(yyvsp[0].cp); delete [] yyvsp[0].cp;;
    break;}
case 55:
#line 483 "pddl+.yacc"
{yyval.t_type_list= yyvsp[-1].t_type_list; yyval.t_type_list->push_back(yyvsp[0].t_type);;
    break;}
case 56:
#line 484 "pddl+.yacc"
{yyval.t_type_list= new pddl_type_list;;
    break;}
case 57:
#line 489 "pddl+.yacc"
{yyval.t_type_list= yyvsp[-1].t_type_list; yyval.t_type_list->push_back(yyvsp[0].t_type);;
    break;}
case 58:
#line 490 "pddl+.yacc"
{yyval.t_type_list= new pddl_type_list;;
    break;}
case 59:
#line 495 "pddl+.yacc"
{ yyval.t_effect_lists=yyvsp[-5].t_effect_lists;
	  yyval.t_effect_lists->assign_effects.push_back(new assignment(yyvsp[-2].t_func_term,E_ASSIGN,yyvsp[-1].t_num_expression));  
          requires(E_FLUENTS); 
	;
    break;}
case 60:
#line 500 "pddl+.yacc"
{ yyval.t_effect_lists=yyvsp[-1].t_effect_lists; yyval.t_effect_lists->add_effects.push_back(yyvsp[0].t_simple_effect); ;
    break;}
case 61:
#line 502 "pddl+.yacc"
{ yyval.t_effect_lists=yyvsp[-1].t_effect_lists; yyval.t_effect_lists->del_effects.push_back(yyvsp[0].t_simple_effect); ;
    break;}
case 62:
#line 504 "pddl+.yacc"
{ yyval.t_effect_lists= new effect_lists;;
    break;}
case 63:
#line 509 "pddl+.yacc"
{yyval.t_effect_lists=yyvsp[0].t_effect_lists; yyval.t_effect_lists->append_effects(yyvsp[-1].t_effect_lists); delete yyvsp[-1].t_effect_lists;;
    break;}
case 64:
#line 510 "pddl+.yacc"
{yyval.t_effect_lists=yyvsp[0].t_effect_lists; yyval.t_effect_lists->cond_effects.push_front(yyvsp[-1].t_cond_effect); 
                                      requires(E_COND_EFFS);;
    break;}
case 65:
#line 512 "pddl+.yacc"
{yyval.t_effect_lists=yyvsp[0].t_effect_lists; yyval.t_effect_lists->forall_effects.push_front(yyvsp[-1].t_forall_effect);
                                      requires(E_COND_EFFS);;
    break;}
case 66:
#line 514 "pddl+.yacc"
{yyval.t_effect_lists=new effect_lists(); ;
    break;}
case 67:
#line 523 "pddl+.yacc"
{yyval.t_effect_lists= yyvsp[0].t_effect_lists;;
    break;}
case 68:
#line 524 "pddl+.yacc"
{yyval.t_effect_lists=new effect_lists; yyval.t_effect_lists->add_effects.push_front(yyvsp[0].t_simple_effect);;
    break;}
case 69:
#line 525 "pddl+.yacc"
{yyval.t_effect_lists=new effect_lists; yyval.t_effect_lists->del_effects.push_front(yyvsp[0].t_simple_effect);;
    break;}
case 70:
#line 526 "pddl+.yacc"
{yyval.t_effect_lists=new effect_lists; yyval.t_effect_lists->cond_effects.push_front(yyvsp[0].t_cond_effect);;
    break;}
case 71:
#line 527 "pddl+.yacc"
{yyval.t_effect_lists=new effect_lists; yyval.t_effect_lists->forall_effects.push_front(yyvsp[0].t_forall_effect);;
    break;}
case 72:
#line 531 "pddl+.yacc"
{yyval.t_effect_lists= yyvsp[-1].t_effect_lists;;
    break;}
case 73:
#line 532 "pddl+.yacc"
{yyval.t_effect_lists= yyvsp[0].t_effect_lists;;
    break;}
case 74:
#line 537 "pddl+.yacc"
{yyval.t_effect_lists=new effect_lists; yyval.t_effect_lists->del_effects.push_front(yyvsp[0].t_simple_effect);;
    break;}
case 75:
#line 539 "pddl+.yacc"
{yyval.t_effect_lists=new effect_lists; yyval.t_effect_lists->add_effects.push_front(yyvsp[0].t_simple_effect);;
    break;}
case 76:
#line 541 "pddl+.yacc"
{yyval.t_effect_lists=new effect_lists; yyval.t_effect_lists->assign_effects.push_front(yyvsp[0].t_assignment);
         requires(E_FLUENTS);;
    break;}
case 77:
#line 547 "pddl+.yacc"
{yyval.t_effect_lists= yyvsp[-1].t_effect_lists; yyval.t_effect_lists->del_effects.push_back(yyvsp[0].t_simple_effect);;
    break;}
case 78:
#line 548 "pddl+.yacc"
{yyval.t_effect_lists= yyvsp[-1].t_effect_lists; yyval.t_effect_lists->add_effects.push_back(yyvsp[0].t_simple_effect);;
    break;}
case 79:
#line 549 "pddl+.yacc"
{yyval.t_effect_lists= yyvsp[-1].t_effect_lists; yyval.t_effect_lists->assign_effects.push_back(yyvsp[0].t_assignment);
                                     requires(E_FLUENTS); ;
    break;}
case 80:
#line 551 "pddl+.yacc"
{ yyval.t_effect_lists= new effect_lists; ;
    break;}
case 81:
#line 556 "pddl+.yacc"
{ yyval.t_effect_lists=yyvsp[-1].t_effect_lists; ;
    break;}
case 82:
#line 558 "pddl+.yacc"
{yyerrok; yyval.t_effect_lists=NULL;
	 log_error(E_FATAL,"Syntax error in (and ...)");
	;
    break;}
case 83:
#line 566 "pddl+.yacc"
{ yyval.t_effect_lists=yyvsp[-1].t_effect_lists; ;
    break;}
case 84:
#line 571 "pddl+.yacc"
{ yyval.t_effect_lists= new effect_lists; 
          yyval.t_effect_lists->forall_effects.push_back(
	       new forall_effect(yyvsp[-1].t_effect_lists, current_analysis->var_tab_stack.pop())); 
          requires(E_COND_EFFS); 
          yyvsp[-3].t_var_symbol_list->clear();delete yyvsp[-3].t_var_symbol_list;;
    break;}
case 85:
#line 577 "pddl+.yacc"
{ yyval.t_effect_lists= new effect_lists;
	  yyval.t_effect_lists->cond_effects.push_back(
	       new cond_effect(yyvsp[-2].t_goal,yyvsp[-1].t_effect_lists));
          requires(E_COND_EFFS); ;
    break;}
case 86:
#line 582 "pddl+.yacc"
{ yyval.t_effect_lists=new effect_lists;
          yyval.t_effect_lists->timed_effects.push_back(yyvsp[0].t_timed_effect); ;
    break;}
case 87:
#line 585 "pddl+.yacc"
{ yyval.t_effect_lists= new effect_lists;
	  yyval.t_effect_lists->assign_effects.push_front(yyvsp[0].t_assignment);
          requires(E_FLUENTS); ;
    break;}
case 88:
#line 591 "pddl+.yacc"
{ yyval.t_effect_lists=yyvsp[-1].t_effect_lists; yyvsp[-1].t_effect_lists->append_effects(yyvsp[0].t_effect_lists); delete yyvsp[0].t_effect_lists; ;
    break;}
case 89:
#line 592 "pddl+.yacc"
{ yyval.t_effect_lists= new effect_lists; ;
    break;}
case 90:
#line 597 "pddl+.yacc"
{yyval.t_timed_effect=new timed_effect(yyvsp[-1].t_effect_lists,E_AT_START);;
    break;}
case 91:
#line 599 "pddl+.yacc"
{yyval.t_timed_effect=new timed_effect(yyvsp[-1].t_effect_lists,E_AT_END);;
    break;}
case 92:
#line 601 "pddl+.yacc"
{yyval.t_timed_effect=new timed_effect(new effect_lists,E_CONTINUOUS);
         yyval.t_timed_effect->effs->assign_effects.push_front(
	     new assignment(yyvsp[-2].t_func_term,E_INCREASE,yyvsp[-1].t_expression)); ;
    break;}
case 93:
#line 605 "pddl+.yacc"
{yyval.t_timed_effect=new timed_effect(new effect_lists,E_CONTINUOUS);
         yyval.t_timed_effect->effs->assign_effects.push_front(
	     new assignment(yyvsp[-2].t_func_term,E_DECREASE,yyvsp[-1].t_expression)); ;
    break;}
case 94:
#line 609 "pddl+.yacc"
{yyerrok; yyval.t_timed_effect=NULL;
	log_error(E_FATAL,"Syntax error in timed effect"); ;
    break;}
case 95:
#line 615 "pddl+.yacc"
{yyval.t_effect_lists= yyvsp[-1].t_effect_lists;;
    break;}
case 96:
#line 616 "pddl+.yacc"
{yyval.t_effect_lists= yyvsp[0].t_effect_lists;;
    break;}
case 97:
#line 621 "pddl+.yacc"
{yyval.t_effect_lists=new effect_lists; yyval.t_effect_lists->del_effects.push_front(yyvsp[0].t_simple_effect);;
    break;}
case 98:
#line 623 "pddl+.yacc"
{yyval.t_effect_lists=new effect_lists; yyval.t_effect_lists->add_effects.push_front(yyvsp[0].t_simple_effect);;
    break;}
case 99:
#line 625 "pddl+.yacc"
{yyval.t_effect_lists=new effect_lists; yyval.t_effect_lists->assign_effects.push_front(yyvsp[0].t_assignment);
         requires(E_FLUENTS);;
    break;}
case 100:
#line 631 "pddl+.yacc"
{yyval.t_effect_lists= yyvsp[-1].t_effect_lists; yyval.t_effect_lists->del_effects.push_back(yyvsp[0].t_simple_effect);;
    break;}
case 101:
#line 632 "pddl+.yacc"
{yyval.t_effect_lists= yyvsp[-1].t_effect_lists; yyval.t_effect_lists->add_effects.push_back(yyvsp[0].t_simple_effect);;
    break;}
case 102:
#line 633 "pddl+.yacc"
{yyval.t_effect_lists= yyvsp[-1].t_effect_lists; yyval.t_effect_lists->assign_effects.push_back(yyvsp[0].t_assignment);
                                     requires(E_FLUENTS); ;
    break;}
case 103:
#line 635 "pddl+.yacc"
{ yyval.t_effect_lists= new effect_lists; ;
    break;}
case 104:
#line 641 "pddl+.yacc"
{ yyval.t_assignment= new assignment(yyvsp[-2].t_func_term,E_ASSIGN,yyvsp[-1].t_expression); ;
    break;}
case 105:
#line 643 "pddl+.yacc"
{ yyval.t_assignment= new assignment(yyvsp[-2].t_func_term,E_INCREASE,yyvsp[-1].t_expression); ;
    break;}
case 106:
#line 645 "pddl+.yacc"
{ yyval.t_assignment= new assignment(yyvsp[-2].t_func_term,E_DECREASE,yyvsp[-1].t_expression); ;
    break;}
case 107:
#line 647 "pddl+.yacc"
{ yyval.t_assignment= new assignment(yyvsp[-2].t_func_term,E_SCALE_UP,yyvsp[-1].t_expression); ;
    break;}
case 108:
#line 649 "pddl+.yacc"
{ yyval.t_assignment= new assignment(yyvsp[-2].t_func_term,E_SCALE_DOWN,yyvsp[-1].t_expression); ;
    break;}
case 109:
#line 653 "pddl+.yacc"
{yyval.t_expression= yyvsp[0].t_expression;;
    break;}
case 110:
#line 654 "pddl+.yacc"
{yyval.t_expression= new special_val_expr(E_DURATION_VAR);
                    requires( E_DURATION_INEQUALITIES );;
    break;}
case 111:
#line 656 "pddl+.yacc"
{ yyval.t_expression=yyvsp[0].t_num_expression; ;
    break;}
case 112:
#line 657 "pddl+.yacc"
{ yyval.t_expression= yyvsp[0].t_func_term; ;
    break;}
case 113:
#line 662 "pddl+.yacc"
{ yyval.t_expression= new plus_expression(yyvsp[-2].t_expression,yyvsp[-1].t_expression); ;
    break;}
case 114:
#line 664 "pddl+.yacc"
{ yyval.t_expression= new minus_expression(yyvsp[-2].t_expression,yyvsp[-1].t_expression); ;
    break;}
case 115:
#line 666 "pddl+.yacc"
{ yyval.t_expression= new mul_expression(yyvsp[-2].t_expression,yyvsp[-1].t_expression); ;
    break;}
case 116:
#line 668 "pddl+.yacc"
{ yyval.t_expression= new div_expression(yyvsp[-2].t_expression,yyvsp[-1].t_expression); ;
    break;}
case 117:
#line 673 "pddl+.yacc"
{ yyval.t_goal= new conj_goal(yyvsp[-1].t_goal_list); ;
    break;}
case 118:
#line 675 "pddl+.yacc"
{ yyval.t_goal= new timed_goal(new comparison(yyvsp[-4].t_comparison_op,
        			new special_val_expr(E_DURATION_VAR),yyvsp[-1].t_expression),E_AT_START); ;
    break;}
case 119:
#line 678 "pddl+.yacc"
{ yyval.t_goal = new timed_goal(new comparison(yyvsp[-5].t_comparison_op,
					new special_val_expr(E_DURATION_VAR),yyvsp[-2].t_expression),E_AT_START);;
    break;}
case 120:
#line 681 "pddl+.yacc"
{ yyval.t_goal = new timed_goal(new comparison(yyvsp[-5].t_comparison_op,
					new special_val_expr(E_DURATION_VAR),yyvsp[-2].t_expression),E_AT_END);;
    break;}
case 121:
#line 686 "pddl+.yacc"
{yyval.t_comparison_op= E_LESSEQ; requires(E_DURATION_INEQUALITIES);;
    break;}
case 122:
#line 687 "pddl+.yacc"
{yyval.t_comparison_op= E_GREATEQ; requires(E_DURATION_INEQUALITIES);;
    break;}
case 123:
#line 688 "pddl+.yacc"
{yyval.t_comparison_op= E_EQUALS; ;
    break;}
case 124:
#line 696 "pddl+.yacc"
{yyval.t_expression= yyvsp[0].t_expression; ;
    break;}
case 125:
#line 701 "pddl+.yacc"
{ yyval.t_goal_list=yyvsp[-1].t_goal_list; yyval.t_goal_list->push_back(yyvsp[0].t_goal); ;
    break;}
case 126:
#line 703 "pddl+.yacc"
{ yyval.t_goal_list= new goal_list; ;
    break;}
case 127:
#line 708 "pddl+.yacc"
{ yyval.t_simple_effect= new simple_effect(yyvsp[-1].t_proposition); ;
    break;}
case 128:
#line 713 "pddl+.yacc"
{ yyval.t_simple_effect= new simple_effect(yyvsp[0].t_proposition); ;
    break;}
case 129:
#line 720 "pddl+.yacc"
{ yyval.t_simple_effect= new simple_effect(yyvsp[-1].t_proposition); ;
    break;}
case 130:
#line 725 "pddl+.yacc"
{ yyval.t_simple_effect= new simple_effect(yyvsp[0].t_proposition); ;
    break;}
case 131:
#line 730 "pddl+.yacc"
{ yyval.t_forall_effect= new forall_effect(yyvsp[-1].t_effect_lists, current_analysis->var_tab_stack.pop()); 
     			yyvsp[-3].t_var_symbol_list->clear(); delete yyvsp[-3].t_var_symbol_list;;
    break;}
case 132:
#line 736 "pddl+.yacc"
{ yyval.t_cond_effect= new cond_effect(yyvsp[-2].t_goal,yyvsp[-1].t_effect_lists); ;
    break;}
case 133:
#line 741 "pddl+.yacc"
{ yyval.t_assignment= new assignment(yyvsp[-2].t_func_term,E_ASSIGN,yyvsp[-1].t_expression); ;
    break;}
case 134:
#line 743 "pddl+.yacc"
{ yyval.t_assignment= new assignment(yyvsp[-2].t_func_term,E_INCREASE,yyvsp[-1].t_expression); ;
    break;}
case 135:
#line 745 "pddl+.yacc"
{ yyval.t_assignment= new assignment(yyvsp[-2].t_func_term,E_DECREASE,yyvsp[-1].t_expression); ;
    break;}
case 136:
#line 747 "pddl+.yacc"
{ yyval.t_assignment= new assignment(yyvsp[-2].t_func_term,E_SCALE_UP,yyvsp[-1].t_expression); ;
    break;}
case 137:
#line 749 "pddl+.yacc"
{ yyval.t_assignment= new assignment(yyvsp[-2].t_func_term,E_SCALE_DOWN,yyvsp[-1].t_expression); ;
    break;}
case 138:
#line 754 "pddl+.yacc"
{ yyval.t_expression= new uminus_expression(yyvsp[-1].t_expression); requires(E_FLUENTS); ;
    break;}
case 139:
#line 756 "pddl+.yacc"
{ yyval.t_expression= new plus_expression(yyvsp[-2].t_expression,yyvsp[-1].t_expression); requires(E_FLUENTS); ;
    break;}
case 140:
#line 758 "pddl+.yacc"
{ yyval.t_expression= new minus_expression(yyvsp[-2].t_expression,yyvsp[-1].t_expression); requires(E_FLUENTS); ;
    break;}
case 141:
#line 760 "pddl+.yacc"
{ yyval.t_expression= new mul_expression(yyvsp[-2].t_expression,yyvsp[-1].t_expression); requires(E_FLUENTS); ;
    break;}
case 142:
#line 762 "pddl+.yacc"
{ yyval.t_expression= new div_expression(yyvsp[-2].t_expression,yyvsp[-1].t_expression); requires(E_FLUENTS); ;
    break;}
case 143:
#line 763 "pddl+.yacc"
{ yyval.t_expression=yyvsp[0].t_num_expression; ;
    break;}
case 144:
#line 764 "pddl+.yacc"
{ yyval.t_expression= yyvsp[0].t_func_term; requires(E_FLUENTS); ;
    break;}
case 145:
#line 769 "pddl+.yacc"
{ yyval.t_expression= new mul_expression(new special_val_expr(E_HASHT),yyvsp[-1].t_expression); ;
    break;}
case 146:
#line 771 "pddl+.yacc"
{ yyval.t_expression= new mul_expression(yyvsp[-2].t_expression, new special_val_expr(E_HASHT)); ;
    break;}
case 147:
#line 773 "pddl+.yacc"
{ yyval.t_expression= new special_val_expr(E_HASHT); ;
    break;}
case 148:
#line 778 "pddl+.yacc"
{ yyval.t_num_expression=new int_expression(yyvsp[0].ival);   ;
    break;}
case 149:
#line 779 "pddl+.yacc"
{ yyval.t_num_expression=new float_expression(yyvsp[0].fval); ;
    break;}
case 150:
#line 783 "pddl+.yacc"
{ yyval.t_func_term=new func_term( current_analysis->func_tab.symbol_get(yyvsp[-2].cp), yyvsp[-1].t_parameter_symbol_list); delete [] yyvsp[-2].cp; ;
    break;}
case 151:
#line 786 "pddl+.yacc"
{ yyval.t_func_term=new func_term( current_analysis->func_tab.symbol_get(yyvsp[-2].cp), yyvsp[-1].t_parameter_symbol_list); delete [] yyvsp[-2].cp; ;
    break;}
case 152:
#line 788 "pddl+.yacc"
{ yyval.t_func_term=new func_term( current_analysis->func_tab.symbol_get(yyvsp[0].cp),
                            new parameter_symbol_list); delete [] yyvsp[0].cp;;
    break;}
case 153:
#line 806 "pddl+.yacc"
{ yyval.t_func_term=new func_term( current_analysis->func_tab.symbol_get(yyvsp[-2].cp), yyvsp[-1].t_parameter_symbol_list); delete [] yyvsp[-2].cp; ;
    break;}
case 154:
#line 808 "pddl+.yacc"
{ yyval.t_func_term=new func_term( current_analysis->func_tab.symbol_get(yyvsp[0].cp),
                            new parameter_symbol_list); delete [] yyvsp[0].cp;;
    break;}
case 155:
#line 813 "pddl+.yacc"
{ yyval.t_comparison_op= E_GREATER; ;
    break;}
case 156:
#line 814 "pddl+.yacc"
{ yyval.t_comparison_op= E_GREATEQ; ;
    break;}
case 157:
#line 815 "pddl+.yacc"
{ yyval.t_comparison_op= E_LESS; ;
    break;}
case 158:
#line 816 "pddl+.yacc"
{ yyval.t_comparison_op= E_LESSEQ; ;
    break;}
case 159:
#line 817 "pddl+.yacc"
{ yyval.t_comparison_op= E_EQUALS; ;
    break;}
case 160:
#line 830 "pddl+.yacc"
{yyval.t_goal= new simple_goal(yyvsp[0].t_proposition,E_POS);;
    break;}
case 161:
#line 832 "pddl+.yacc"
{yyval.t_goal= new neg_goal(yyvsp[-1].t_goal);simple_goal * s = dynamic_cast<simple_goal *>(yyvsp[-1].t_goal);
       if(s && s->getProp()->head->getName()=="=") {requires(E_EQUALITY);} 
       else{requires(E_NEGATIVE_PRECONDITIONS);};;
    break;}
case 162:
#line 836 "pddl+.yacc"
{yyval.t_goal= new conj_goal(yyvsp[-1].t_goal_list);;
    break;}
case 163:
#line 838 "pddl+.yacc"
{yyval.t_goal= new disj_goal(yyvsp[-1].t_goal_list);
        requires(E_DISJUNCTIVE_PRECONDS);;
    break;}
case 164:
#line 841 "pddl+.yacc"
{yyval.t_goal= new imply_goal(yyvsp[-2].t_goal,yyvsp[-1].t_goal);
        requires(E_DISJUNCTIVE_PRECONDS);;
    break;}
case 165:
#line 845 "pddl+.yacc"
{yyval.t_goal= new qfied_goal(yyvsp[-5].t_quantifier,yyvsp[-3].t_var_symbol_list,yyvsp[-1].t_goal); ;
    break;}
case 166:
#line 847 "pddl+.yacc"
{yyval.t_goal= new comparison(yyvsp[-3].t_comparison_op,yyvsp[-2].t_expression,yyvsp[-1].t_expression); 
        requires(E_FLUENTS);;
    break;}
case 167:
#line 853 "pddl+.yacc"
{yyval.t_goal_list=yyvsp[-1].t_goal_list; yyvsp[-1].t_goal_list->push_back(yyvsp[0].t_goal);;
    break;}
case 168:
#line 855 "pddl+.yacc"
{yyval.t_goal_list= new goal_list;;
    break;}
case 169:
#line 859 "pddl+.yacc"
{yyval.t_quantifier=yyvsp[0].t_quantifier;;
    break;}
case 170:
#line 860 "pddl+.yacc"
{yyval.t_quantifier=yyvsp[0].t_quantifier;;
    break;}
case 171:
#line 865 "pddl+.yacc"
{yyval.t_quantifier=E_FORALL; 
        current_analysis->var_tab_stack.push(new var_symbol_table);;
    break;}
case 172:
#line 871 "pddl+.yacc"
{yyval.t_quantifier=E_EXISTS;
        current_analysis->var_tab_stack.push(new var_symbol_table);;
    break;}
case 173:
#line 877 "pddl+.yacc"
{yyval.t_proposition=new proposition(yyvsp[-2].t_pred_symbol,yyvsp[-1].t_parameter_symbol_list);;
    break;}
case 174:
#line 882 "pddl+.yacc"
{yyval.t_proposition=new proposition(yyvsp[-2].t_pred_symbol,yyvsp[-1].t_parameter_symbol_list);;
    break;}
case 175:
#line 887 "pddl+.yacc"
{yyval.t_pred_decl_list= yyvsp[-1].t_pred_decl_list;;
    break;}
case 176:
#line 889 "pddl+.yacc"
{yyerrok; yyval.t_pred_decl_list=NULL;
	 log_error(E_FATAL,"Syntax error in (:predicates ...)");
	;
    break;}
case 177:
#line 896 "pddl+.yacc"
{yyval.t_func_decl_list= yyvsp[-1].t_func_decl_list;;
    break;}
case 178:
#line 898 "pddl+.yacc"
{yyerrok; yyval.t_func_decl_list=NULL;
	 log_error(E_FATAL,"Syntax error in (:functions ...)");
	;
    break;}
case 179:
#line 904 "pddl+.yacc"
{ yyval.t_operator_list=yyvsp[-1].t_operator_list; yyval.t_operator_list->push_back(yyvsp[0].t_operator); ;
    break;}
case 180:
#line 905 "pddl+.yacc"
{ yyval.t_operator_list= new operator_list; yyval.t_operator_list->push_back(yyvsp[0].t_operator); ;
    break;}
case 181:
#line 909 "pddl+.yacc"
{ yyval.t_operator= yyvsp[0].t_action_def; ;
    break;}
case 182:
#line 910 "pddl+.yacc"
{ yyval.t_operator= yyvsp[0].t_event_def; requires(E_TIME); ;
    break;}
case 183:
#line 911 "pddl+.yacc"
{ yyval.t_operator= yyvsp[0].t_process_def; requires(E_TIME); ;
    break;}
case 184:
#line 912 "pddl+.yacc"
{ yyval.t_operator= yyvsp[0].t_durative_action_def; requires(E_DURATIVE_ACTIONS); ;
    break;}
case 185:
#line 924 "pddl+.yacc"
{ yyval.t_action_def= new action(current_analysis->op_tab.symbol_put(yyvsp[-9].cp),
			yyvsp[-6].t_var_symbol_list,yyvsp[-3].t_goal,yyvsp[-1].t_effect_lists,
			current_analysis->var_tab_stack.pop()); delete [] yyvsp[-9].cp; ;
    break;}
case 186:
#line 928 "pddl+.yacc"
{yyerrok; 
	 log_error(E_FATAL,"Syntax error in action declaration.");
	 yyval.t_action_def= NULL; ;
    break;}
case 187:
#line 941 "pddl+.yacc"
{yyval.t_event_def= new event(current_analysis->op_tab.symbol_put(yyvsp[-9].cp),
		   yyvsp[-6].t_var_symbol_list,yyvsp[-3].t_goal,yyvsp[-1].t_effect_lists,
		   current_analysis->var_tab_stack.pop()); delete [] yyvsp[-9].cp;;
    break;}
case 188:
#line 946 "pddl+.yacc"
{yyerrok; 
	 log_error(E_FATAL,"Syntax error in event declaration.");
	 yyval.t_event_def= NULL; ;
    break;}
case 189:
#line 958 "pddl+.yacc"
{yyval.t_process_def= new process(current_analysis->op_tab.symbol_put(yyvsp[-9].cp),
		     yyvsp[-6].t_var_symbol_list,yyvsp[-3].t_goal,yyvsp[-1].t_effect_lists,
                     current_analysis->var_tab_stack.pop()); delete [] yyvsp[-9].cp;;
    break;}
case 190:
#line 962 "pddl+.yacc"
{yyerrok; 
	 log_error(E_FATAL,"Syntax error in process declaration.");
	 yyval.t_process_def= NULL; ;
    break;}
case 191:
#line 974 "pddl+.yacc"
{ yyval.t_durative_action_def= yyvsp[-1].t_durative_action_def;
      yyval.t_durative_action_def->name= current_analysis->op_tab.symbol_put(yyvsp[-8].cp);
      yyval.t_durative_action_def->symtab= current_analysis->var_tab_stack.pop();
      yyval.t_durative_action_def->parameters= yyvsp[-5].t_var_symbol_list;
      yyval.t_durative_action_def->dur_constraint= yyvsp[-2].t_goal; 
      delete [] yyvsp[-8].cp;
    ;
    break;}
case 192:
#line 983 "pddl+.yacc"
{yyerrok; 
	 log_error(E_FATAL,"Syntax error in durative-action declaration.");
	 yyval.t_durative_action_def= NULL; ;
    break;}
case 193:
#line 990 "pddl+.yacc"
{yyval.t_durative_action_def=yyvsp[-2].t_durative_action_def; yyval.t_durative_action_def->effects=yyvsp[0].t_effect_lists;;
    break;}
case 194:
#line 992 "pddl+.yacc"
{yyval.t_durative_action_def=yyvsp[-2].t_durative_action_def; yyval.t_durative_action_def->precondition=yyvsp[0].t_goal;;
    break;}
case 195:
#line 993 "pddl+.yacc"
{yyval.t_durative_action_def= new durative_action;;
    break;}
case 196:
#line 998 "pddl+.yacc"
{ yyval.t_goal=yyvsp[0].t_goal; ;
    break;}
case 197:
#line 1000 "pddl+.yacc"
{ yyval.t_goal= new conj_goal(yyvsp[-1].t_goal_list); ;
    break;}
case 198:
#line 1005 "pddl+.yacc"
{ yyval.t_goal_list=yyvsp[-1].t_goal_list; yyval.t_goal_list->push_back(yyvsp[0].t_goal); ;
    break;}
case 199:
#line 1007 "pddl+.yacc"
{ yyval.t_goal_list= new goal_list; ;
    break;}
case 200:
#line 1012 "pddl+.yacc"
{yyval.t_goal= new timed_goal(yyvsp[-1].t_goal,E_AT_START);;
    break;}
case 201:
#line 1014 "pddl+.yacc"
{yyval.t_goal= new timed_goal(yyvsp[-1].t_goal,E_AT_END);;
    break;}
case 202:
#line 1016 "pddl+.yacc"
{yyval.t_goal= new timed_goal(yyvsp[-1].t_goal,E_OVER_ALL);;
    break;}
case 203:
#line 1020 "pddl+.yacc"
{yyval.t_dummy= 0; current_analysis->var_tab_stack.push(new var_symbol_table);;
    break;}
case 204:
#line 1024 "pddl+.yacc"
{yyval.t_pddl_req_flag= E_EQUALITY;;
    break;}
case 205:
#line 1025 "pddl+.yacc"
{yyval.t_pddl_req_flag= E_STRIPS;;
    break;}
case 206:
#line 1027 "pddl+.yacc"
{yyval.t_pddl_req_flag= E_TYPING;;
    break;}
case 207:
#line 1029 "pddl+.yacc"
{yyval.t_pddl_req_flag= E_NEGATIVE_PRECONDITIONS;;
    break;}
case 208:
#line 1031 "pddl+.yacc"
{yyval.t_pddl_req_flag= E_DISJUNCTIVE_PRECONDS;;
    break;}
case 209:
#line 1032 "pddl+.yacc"
{yyval.t_pddl_req_flag= E_EXT_PRECS;;
    break;}
case 210:
#line 1033 "pddl+.yacc"
{yyval.t_pddl_req_flag= E_UNIV_PRECS;;
    break;}
case 211:
#line 1034 "pddl+.yacc"
{yyval.t_pddl_req_flag= E_COND_EFFS;;
    break;}
case 212:
#line 1035 "pddl+.yacc"
{yyval.t_pddl_req_flag= E_FLUENTS;;
    break;}
case 213:
#line 1037 "pddl+.yacc"
{yyval.t_pddl_req_flag= E_DURATIVE_ACTIONS;;
    break;}
case 214:
#line 1038 "pddl+.yacc"
{yyval.t_pddl_req_flag= E_TIME |
                      E_FLUENTS |
                      E_DURATIVE_ACTIONS; ;
    break;}
case 215:
#line 1042 "pddl+.yacc"
{yyval.t_pddl_req_flag= E_STRIPS |
		      E_TYPING | 
		      E_NEGATIVE_PRECONDITIONS |
		      E_DISJUNCTIVE_PRECONDS |
		      E_EQUALITY |
		      E_EXT_PRECS |
		      E_UNIV_PRECS |
		      E_COND_EFFS;;
    break;}
case 216:
#line 1051 "pddl+.yacc"
{yyval.t_pddl_req_flag= E_EXT_PRECS |
		      E_UNIV_PRECS;;
    break;}
case 217:
#line 1055 "pddl+.yacc"
{yyval.t_pddl_req_flag= E_DURATION_INEQUALITIES;;
    break;}
case 218:
#line 1058 "pddl+.yacc"
{yyval.t_pddl_req_flag= E_CONTINUOUS_EFFECTS;;
    break;}
case 219:
#line 1060 "pddl+.yacc"
{log_error(E_WARNING,"Unrecognised requirements declaration ");
       yyval.t_pddl_req_flag= 0; delete [] yyvsp[0].cp;;
    break;}
case 220:
#line 1066 "pddl+.yacc"
{yyval.t_const_symbol_list=yyvsp[-1].t_const_symbol_list;;
    break;}
case 221:
#line 1070 "pddl+.yacc"
{yyval.t_type_list=yyvsp[-1].t_type_list; requires(E_TYPING);;
    break;}
case 222:
#line 1080 "pddl+.yacc"
{yyval.t_problem=yyvsp[-1].t_problem; yyval.t_problem->name = yyvsp[-7].cp; yyval.t_problem->domain_name = yyvsp[-3].cp;;
    break;}
case 223:
#line 1082 "pddl+.yacc"
{yyerrok; yyval.t_problem=NULL;
       	log_error(E_FATAL,"Syntax error in problem definition."); ;
    break;}
case 224:
#line 1088 "pddl+.yacc"
{yyval.t_problem=yyvsp[0].t_problem; yyval.t_problem->req= yyvsp[-1].t_pddl_req_flag;;
    break;}
case 225:
#line 1089 "pddl+.yacc"
{yyval.t_problem=yyvsp[0].t_problem; yyval.t_problem->objects= yyvsp[-1].t_const_symbol_list;;
    break;}
case 226:
#line 1090 "pddl+.yacc"
{yyval.t_problem=yyvsp[0].t_problem; yyval.t_problem->initial_state= yyvsp[-1].t_effect_lists;;
    break;}
case 227:
#line 1091 "pddl+.yacc"
{yyval.t_problem=yyvsp[0].t_problem; yyval.t_problem->the_goal= yyvsp[-1].t_goal;;
    break;}
case 228:
#line 1092 "pddl+.yacc"
{yyval.t_problem=yyvsp[0].t_problem; yyval.t_problem->metric= yyvsp[-1].t_metric;;
    break;}
case 229:
#line 1093 "pddl+.yacc"
{yyval.t_problem=yyvsp[0].t_problem; yyval.t_problem->length= yyvsp[-1].t_length_spec;;
    break;}
case 230:
#line 1094 "pddl+.yacc"
{yyval.t_problem=new problem;;
    break;}
case 231:
#line 1097 "pddl+.yacc"
{yyval.t_const_symbol_list=yyvsp[-1].t_const_symbol_list;;
    break;}
case 232:
#line 1100 "pddl+.yacc"
{yyval.t_effect_lists=yyvsp[-1].t_effect_lists;;
    break;}
case 233:
#line 1103 "pddl+.yacc"
{yyval.t_goal=yyvsp[-1].t_goal;;
    break;}
case 234:
#line 1108 "pddl+.yacc"
{ yyval.t_metric= new metric_spec(yyvsp[-2].t_optimization,yyvsp[-1].t_expression); ;
    break;}
case 235:
#line 1110 "pddl+.yacc"
{yyerrok; 
        log_error(E_FATAL,"Syntax error in metric declaration.");
        yyval.t_metric= NULL; ;
    break;}
case 236:
#line 1117 "pddl+.yacc"
{yyval.t_length_spec= yyvsp[-1].t_length_spec;;
    break;}
case 237:
#line 1121 "pddl+.yacc"
{yyval.t_length_spec= new length_spec(E_SERIAL,yyvsp[0].ival);;
    break;}
case 238:
#line 1122 "pddl+.yacc"
{yyval.t_length_spec= new length_spec(E_PARALLEL,yyvsp[-3].ival);;
    break;}
case 239:
#line 1126 "pddl+.yacc"
{yyval.t_optimization= E_MINIMIZE;;
    break;}
case 240:
#line 1127 "pddl+.yacc"
{yyval.t_optimization= E_MAXIMIZE;;
    break;}
case 241:
#line 1132 "pddl+.yacc"
{yyval.t_expression= yyvsp[-1].t_expression;;
    break;}
case 242:
#line 1133 "pddl+.yacc"
{yyval.t_expression= yyvsp[0].t_func_term;;
    break;}
case 243:
#line 1134 "pddl+.yacc"
{yyval.t_expression= yyvsp[0].t_num_expression;;
    break;}
case 244:
#line 1135 "pddl+.yacc"
{ yyval.t_expression= new special_val_expr(E_TOTAL_TIME); ;
    break;}
case 245:
#line 1136 "pddl+.yacc"
{yyval.t_expression=yyvsp[-1].t_expression;;
    break;}
case 246:
#line 1140 "pddl+.yacc"
{ yyval.t_expression= new plus_expression(yyvsp[-1].t_expression,yyvsp[0].t_expression); ;
    break;}
case 247:
#line 1141 "pddl+.yacc"
{ yyval.t_expression= new minus_expression(yyvsp[-1].t_expression,yyvsp[0].t_expression); ;
    break;}
case 248:
#line 1142 "pddl+.yacc"
{ yyval.t_expression= new mul_expression(yyvsp[-1].t_expression,yyvsp[0].t_expression); ;
    break;}
case 249:
#line 1143 "pddl+.yacc"
{ yyval.t_expression= new div_expression(yyvsp[-1].t_expression,yyvsp[0].t_expression); ;
    break;}
case 250:
#line 1151 "pddl+.yacc"
{yyval.t_plan= yyvsp[0].t_plan; 
         yyval.t_plan->push_front(yyvsp[-1].t_step); ;
    break;}
case 251:
#line 1154 "pddl+.yacc"
{yyval.t_plan= new plan;;
    break;}
case 252:
#line 1159 "pddl+.yacc"
{yyval.t_step=yyvsp[0].t_step; 
         yyval.t_step->start_time_given=1; 
         yyval.t_step->start_time=yyvsp[-2].fval;;
    break;}
case 253:
#line 1163 "pddl+.yacc"
{yyval.t_step=yyvsp[0].t_step;
	 yyval.t_step->start_time_given=0;;
    break;}
case 254:
#line 1169 "pddl+.yacc"
{yyval.t_step= yyvsp[-3].t_step; 
	 yyval.t_step->duration_given=1;
         yyval.t_step->duration= yyvsp[-1].fval;;
    break;}
case 255:
#line 1173 "pddl+.yacc"
{yyval.t_step= yyvsp[0].t_step;
         yyval.t_step->duration_given=0;;
    break;}
case 256:
#line 1179 "pddl+.yacc"
{yyval.t_step= new plan_step( 
              current_analysis->op_tab.symbol_get(yyvsp[-2].cp), 
	      yyvsp[-1].t_const_symbol_list); delete [] yyvsp[-2].cp;
      ;
    break;}
case 257:
#line 1186 "pddl+.yacc"
{yyval.fval= yyvsp[0].fval;;
    break;}
case 258:
#line 1187 "pddl+.yacc"
{yyval.fval= (float) yyvsp[0].ival;;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1190 "pddl+.yacc"


#include <stdio.h>
#include <istream.h>
int line_no= 1;
extern yyFlexLexer* yfl;

#include "lex.yy.cc"

int yyerror(char * s)
{
    return 0;
}

int yylex()
{
    return yfl->yylex();
}
