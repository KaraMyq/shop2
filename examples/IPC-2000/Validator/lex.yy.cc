/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvsroot/shop/shop2/IPC-2000/Validator/lex.yy.cc,v 1.1 2004/09/18 16:45:08 dananau Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 88
#define YY_END_OF_BUFFER 89
static yyconst short int yy_accept[557] =
    {   0,
       86,   86,   89,   88,   83,   85,   88,    1,    2,   74,
       72,   73,   75,   86,   81,   88,   78,   57,   76,   80,
       82,    3,    4,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   83,   64,   86,   87,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   84,   79,   77,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   45,   82,   82,   82,
       82,   82,   87,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   44,   82,    0,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   49,   82,   82,   82,
       82,   82,    0,    8,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   82,    0,    0,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   50,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   56,   55,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   16,    0,    0,    0,   82,    0,
        0,   82,   82,   82,   82,   82,   82,   82,   48,   82,
       82,   82,    0,   82,   82,   82,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   29,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   20,    0,    0,
       71,   37,    0,   82,   25,   26,   82,   51,   46,   47,
       82,   82,   82,    0,   82,   82,   82,   27,    0,    0,
        0,    0,   53,    0,   39,    0,    0,    0,    0,    0,

        0,    0,    0,   58,   61,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   59,    0,    7,    9,    0,    0,
       82,   82,   82,   82,   82,    0,   52,   82,   82,   82,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       15,    0,    0,    0,    0,   54,    0,    0,    0,    0,
       28,    0,    0,    0,    0,   36,   68,   65,   67,   63,
       62,   38,   82,   69,   82,    0,    0,    0,    0,   43,
        0,    0,    6,    0,    0,    0,    0,    0,    0,   60,
        0,    0,    0,    0,    0,    0,    0,   82,   82,   33,
       17,    0,    0,    0,    0,    0,    0,    0,   19,    0,

       42,    0,    0,    0,    0,    0,    0,    0,    0,   70,
       66,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   31,    0,   18,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       41,    0,    0,   32,    0,    5,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   40,    0,    0,
        0,    0,    0,    0,    0,    0,   30,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   21,   35,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   23,    0,    0,    0,    0,    0,
       34,    0,   14,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   22,    0,    0,    0,
        0,    0,    0,   24,    0,    0,    0,    0,    0,   12,
        0,    0,   13,   10,   11,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    5,    1,    1,    1,    1,    6,
        7,    8,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,   19,    1,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       21,    1,   22,    1,   20,    1,   23,   24,   25,   26,

       27,   28,   29,   30,   31,   32,   20,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[48] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2
    } ;

static yyconst short int yy_base[560] =
    {   0,
        0,    0,  791,  792,   46,  792,  749,  792,  792,  792,
      792,  776,  792,   38,   29,  785,  770,  792,  769,  792,
       62,  792,  792,   63,   64,   68,   69,   73,   79,   75,
       77,   83,   84,  102,  104,   57,  792,  108,  772,   98,
      748,   94,  104,   95,  747,  747,  754,  753,  752,  754,
      104,  735,  749,  104,   49,  740,  771,  792,  792,  792,
        0,  131,  138,  140,  142,  144,  148,  146,  150,  152,
      157,  158,  163,  164,  165,  171,  176,  177,  184,  188,
      189,  195,  760,  731,  738,  735,  729,  734,  728,  738,
      739,  722,  736,  731,  726,  718,  724,  735,  172,  722,

      715,  726,  722,  714,  180,  729,  713,  711,  187,  715,
      711,  716,  204,  208,  139,  214,  215,  219,  221,  225,
      223,  227,  235,  239,  241,  246,  247,  248,  252,  256,
      257,  261,  715,  792,  253,  713,  721,  720,  715,  731,
      717,  704,  698,  714,  709,  710,  701,  692,  709,  702,
      691,  706,  701,  704,  167,  701,  690,  682,  692,  683,
      690,  693,  102,  676,  271,  683,  676,  272,  273,  278,
      282,  288,  292,  293,  294,  300,  301,  307,  308,  306,
      315,  319,  321,  680,  684,  673,  682,  670,  680,  669,
      684,  671,  674,  665,  664,  671,  668,  661,  792,  670,

      661,  658,  667,  656,  671,  303,  659,  663,  666,  651,
      660,  667,  648,  651,  792,  647,  651,  658,  333,  658,
      660,  334,  335,  340,  341,  345,  346,  350,  351,  356,
      357,  361,  659,  363,  367,  368,  646,  639,  656,  643,
      642,  641,  644,  633,  634,  641,  792,  644,  660,  628,
      637,  644,  635,  635,  639,  632,  621,  628,  633,  624,
      633,  617,  625,  616,  621,  643,  612,  792,  622,  611,
      372,  792,  610,  381,  383,  385,  387,  389,  391,  393,
      395,  397,  399,  615,  403,  296,  606,  792,  615,  610,
      602,  618,  792,  170,  792,  615,  600,  605,  612,  598,

      601,  603,  612,  792,  792,  591,  593,  605,  590,  604,
      606,  588,  599,  599,  792,  588,  792,  792,  584,  582,
      401,  405,  407,  409,  414,  589,  416,  585,  583,  588,
      582,  576,  580,  574,  579,  586,  587,  565,  569,  581,
      792,  573,  597,  571,  578,  792,  571,  576,  571,  560,
      792,  569,  565,  559,  574,  792,  420,  429,  435,  437,
      439,  792,  552,    0,  561,  559,  553,  550,  560,  580,
      579,  552,  792,  556,  558,  545,  557,  542,  572,  792,
      542,  539,  552,  551,  550,  549,  542,  539,  546,  549,
      792,  531,  527,  538,  545,  532,  543,  538,  792,  536,

      792,  526,  522,  530,  520,  533,  523,  532,  546,    0,
        0,  522,  544,  526,  517,  526,  524,  516,  523,  519,
      507,  792,  509,  792,  534,  502,  506,  504,  530,  512,
      528,  510,  495,  504,  524,  492,  505,  504,  495,  492,
      488,  492,  487,  498,  496,  486,  484,  490,  479,  482,
      792,  493,  492,  792,  477,  792,  489,  487,  485,  484,
      472,  468,  473,  477,  468,  465,  469,  477,  472,  477,
      473,  473,  472,  475,  462,  460,  468,  792,  459,  468,
      451,  455,  463,  464,  463,  454,  446,  450,  459,  457,
      446,  450,  445,  454,  437,  441,  445,  792,  792,  439,

      443,  438,  436,  445,  429,  429,  433,  426,  431,  424,
      438,  428,  431,  421,  792,  434,  428,  432,  426,  425,
      792,  414,  792,  420,  416,  407,  396,  390,  394,  348,
      347,  324,  314,  299,  288,  266,  792,  259,  235,  237,
      229,  211,  207,  792,  206,  183,  184,  105,   95,  792,
       78,   61,  792,  792,  792,  792,  452,   82,   51
    } ;

static yyconst short int yy_def[560] =
    {   0,
      556,    1,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  557,  556,  556,  556,  556,
      558,  556,  556,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  557,  556,  556,  556,
      559,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,

      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  558,  558,  556,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  558,  556,  556,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,

      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  558,  556,
      556,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  556,  558,  558,  558,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      558,  556,  556,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  556,  558,  559,  559,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,

      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      558,  558,  558,  558,  558,  556,  558,  559,  559,  559,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  558,  558,  558,  558,
      558,  556,  559,  559,  559,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  559,  559,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,

      556,  556,  556,  556,  556,  556,  556,  556,  556,  559,
      559,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,

      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,    0,  556,  556,  556
    } ;

static yyconst short int yy_nxt[840] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
        4,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   21,   21,   25,   26,   27,   21,   21,
       28,   21,   21,   29,   30,   31,   32,   21,   21,   33,
       34,   21,   21,   35,   21,   21,   21,   36,   39,   36,
       38,   40,   61,   41,   42,   43,   44,   45,   36,   46,
       36,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   61,   61,   61,   61,   61,   61,   61,   61,  110,
       61,   61,   61,   62,   61,   61,   61,   61,   61,   61,
       66,   61,   61,   61,  111,   61,   61,   63,   69,   67,

      555,   74,   64,   65,   71,   68,   72,   73,   80,   75,
       76,   61,   70,   61,   61,   77,   61,  554,   39,   78,
       38,   79,   84,   85,   87,   95,  104,   96,  216,   88,
      108,   90,  217,   82,  553,   89,   97,   81,   91,  552,
       61,   92,  105,   61,  109,  115,   93,   61,   94,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,  113,   61,  166,   61,   61,  116,   61,
       61,  117,   61,   61,   61,   61,   61,   61,  167,  114,
       61,  118,  121,   61,  119,   61,   61,  124,   61,   61,
      120,  207,  208,   61,  123,  122,   61,   61,   61,  126,

       61,   61,  148,  128,   61,  335,  155,   61,  125,  160,
      130,  127,  336,   61,  149,  156,   61,   61,  551,  129,
       61,  132,  550,   61,   61,  161,   61,   61,   61,  131,
       61,   61,   61,   61,   61,   61,   61,   61,  165,   61,
      549,  170,  548,  171,   61,  169,  547,   61,   61,  174,
       61,   61,  168,   61,  172,   61,   61,   61,   61,   61,
       61,   61,  173,  546,   61,   61,   61,  175,   61,   61,
       61,  177,  545,   61,  544,  180,  178,  176,  185,  182,
       61,   61,   61,   61,   61,   61,  179,   61,  181,  543,
       61,   61,  186,  187,   61,  183,  542,   61,  222,  219,

       61,   61,   61,   61,   61,   61,   61,  223,  224,   61,
       61,  233,   61,   61,  226,   61,   61,   61,   61,   61,
       61,  328,  225,  541,   61,  228,  230,   61,   61,  540,
       61,   61,  227,   61,  231,  258,  259,  329,  234,  229,
      232,  235,   61,   61,   61,   61,   61,   61,  539,   61,
       61,  236,   61,   61,   61,   61,  274,   61,   61,   61,
       61,  275,   61,   61,  538,   61,   61,  271,   61,   61,
       61,  277,   61,   61,  276,   61,  286,  287,  281,   61,
       61,   61,  280,  278,   61,  279,  537,  282,  536,  285,
       61,  283,   61,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
      321,   61,  322,   61,  535,   61,   61,  357,   61,   61,
      534,  533,   61,  359,  323,  360,  327,  532,   61,  358,
      361,   61,  531,  324,   61,  325,   61,   61,   61,   61,
      530,   61,   57,   57,  529,  528,  527,  526,  525,  524,
      523,  522,  521,  520,  519,  518,  517,  516,  515,  514,
      513,  512,  511,  510,  509,  508,  507,  506,  505,  504,
      503,  502,  501,  500,  499,  498,  497,  496,  495,  494,
      493,  492,  491,  490,  489,  488,  487,  486,  485,  484,

      483,  482,  481,  480,  479,  478,  477,  476,  475,  474,
      473,  472,  471,  470,  469,  468,  467,  466,  465,  464,
      463,  462,  461,  460,  459,  458,  457,  456,  455,  454,
      453,  452,  451,  450,  449,  448,  447,  446,  445,  444,
      443,  442,  441,  440,  439,  438,  437,  436,  435,  434,
      433,  432,  431,  430,  429,  428,  427,  426,  425,  424,
      423,  422,  421,  420,  419,  418,  417,  416,  415,  414,
      413,  412,  411,  410,  409,  408,  407,  406,  405,  404,
      403,  402,  401,  400,  399,  398,  397,  396,  395,  394,
      393,  392,  391,  390,  389,  388,  387,  386,  385,  384,

      383,  382,  381,  380,  379,  378,  377,  376,  375,  374,
      373,  372,  371,  370,  369,  368,  367,  366,  365,  364,
      363,  362,  356,  355,  354,  353,  352,  351,  350,  349,
      348,  347,  346,  345,  344,  343,  342,  341,  340,  339,
      338,  337,  334,  333,  332,  331,  330,  326,  320,  319,
      318,  317,  316,  315,  314,  313,  312,  311,  310,  309,
      308,  307,  306,  305,  304,  303,  302,  301,  300,  299,
      298,  297,  296,  295,  294,  293,  292,  291,  290,  289,
      288,  284,  273,  272,  270,  269,  268,  267,  266,  265,
      264,  263,  262,  261,  260,  257,  256,  255,  254,  253,

      252,  251,  250,  249,  248,  247,  246,  245,  244,  243,
      242,  241,  240,  239,  238,  237,  221,  220,  218,  215,
      214,  213,  212,  211,  210,  209,  206,  205,  204,  203,
      202,  201,  200,  199,  198,  197,  196,  195,  194,  193,
      192,  191,  190,  189,  188,  184,  164,  163,  162,  159,
      158,  157,  154,  153,  152,  151,  150,  147,  146,  145,
      144,  143,  142,  141,  140,  139,  138,  137,  136,  135,
      134,  133,   83,   58,  112,  107,  106,  103,  102,  101,
      100,   99,   98,   86,   83,   60,   59,   58,   38,   37,
      556,    3,  556,  556,  556,  556,  556,  556,  556,  556,

      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556
    } ;

static yyconst short int yy_chk[840] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,   14,    5,
       14,   15,  559,   15,   15,   15,   15,   15,   36,   15,
       36,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   21,   24,   25,   21,   24,   25,   26,   27,   55,
       26,   27,   28,  558,   30,   28,   31,   30,   29,   31,
       25,   29,   32,   33,   55,   32,   33,   24,   26,   25,

      552,   29,   24,   24,   27,   25,   28,   28,   33,   29,
       30,   34,   26,   35,   34,   31,   35,  551,   38,   31,
       38,   32,   40,   40,   42,   44,   51,   44,  163,   42,
       54,   43,  163,   35,  549,   42,   44,   34,   43,  548,
       62,   43,   51,   62,   54,   65,   43,   63,   43,   64,
       63,   65,   64,   66,   65,   68,   66,   67,   68,   69,
       67,   70,   69,   63,   70,  115,   71,   72,   66,   71,
       72,   66,   73,   74,   75,   73,   74,   75,  115,   64,
       76,   67,   70,   76,   68,   77,   78,   73,   77,   78,
       69,  155,  155,   79,   72,   71,   79,   80,   81,   75,

       80,   81,   99,   78,   82,  294,  105,   82,   74,  109,
       80,   76,  294,  113,   99,  105,  113,  114,  547,   79,
      114,   82,  546,  116,  117,  109,  116,  117,  118,   81,
      119,  118,  121,  119,  120,  121,  122,  120,  114,  122,
      545,  118,  543,  119,  123,  117,  542,  123,  124,  122,
      125,  124,  116,  125,  120,  126,  127,  128,  126,  127,
      128,  129,  121,  541,  129,  130,  131,  123,  130,  131,
      132,  125,  540,  132,  539,  129,  126,  124,  135,  131,
      165,  168,  169,  165,  168,  169,  128,  170,  130,  538,
      170,  171,  135,  135,  171,  132,  536,  172,  168,  165,

      172,  173,  174,  175,  173,  174,  175,  169,  170,  176,
      177,  179,  176,  177,  172,  180,  178,  179,  180,  178,
      179,  286,  171,  535,  181,  174,  176,  181,  182,  534,
      183,  182,  173,  183,  177,  206,  206,  286,  180,  175,
      178,  181,  219,  222,  223,  219,  222,  223,  533,  224,
      225,  182,  224,  225,  226,  227,  222,  226,  227,  228,
      229,  223,  228,  229,  532,  230,  231,  219,  230,  231,
      232,  225,  234,  232,  224,  234,  235,  236,  230,  235,
      236,  271,  228,  226,  271,  227,  531,  231,  530,  234,
      274,  232,  275,  274,  276,  275,  277,  276,  278,  277,

      279,  278,  280,  279,  281,  280,  282,  281,  283,  282,
      321,  283,  285,  321,  322,  285,  323,  322,  324,  323,
      274,  324,  277,  325,  529,  327,  325,  321,  327,  357,
      528,  527,  357,  323,  281,  324,  285,  526,  358,  322,
      325,  358,  525,  282,  359,  283,  360,  359,  361,  360,
      524,  361,  557,  557,  522,  520,  519,  518,  517,  516,
      514,  513,  512,  511,  510,  509,  508,  507,  506,  505,
      504,  503,  502,  501,  500,  497,  496,  495,  494,  493,
      492,  491,  490,  489,  488,  487,  486,  485,  484,  483,
      482,  481,  480,  479,  477,  476,  475,  474,  473,  472,

      471,  470,  469,  468,  467,  466,  465,  464,  463,  462,
      461,  460,  459,  458,  457,  455,  453,  452,  450,  449,
      448,  447,  446,  445,  444,  443,  442,  441,  440,  439,
      438,  437,  436,  435,  434,  433,  432,  431,  430,  429,
      428,  427,  426,  425,  423,  421,  420,  419,  418,  417,
      416,  415,  414,  413,  412,  409,  408,  407,  406,  405,
      404,  403,  402,  400,  398,  397,  396,  395,  394,  393,
      392,  390,  389,  388,  387,  386,  385,  384,  383,  382,
      381,  379,  378,  377,  376,  375,  374,  372,  371,  370,
      369,  368,  367,  366,  365,  363,  355,  354,  353,  352,

      350,  349,  348,  347,  345,  344,  343,  342,  340,  339,
      338,  337,  336,  335,  334,  333,  332,  331,  330,  329,
      328,  326,  320,  319,  316,  314,  313,  312,  311,  310,
      309,  308,  307,  306,  303,  302,  301,  300,  299,  298,
      297,  296,  292,  291,  290,  289,  287,  284,  273,  270,
      269,  267,  266,  265,  264,  263,  262,  261,  260,  259,
      258,  257,  256,  255,  254,  253,  252,  251,  250,  249,
      248,  246,  245,  244,  243,  242,  241,  240,  239,  238,
      237,  233,  221,  220,  218,  217,  216,  214,  213,  212,
      211,  210,  209,  208,  207,  205,  204,  203,  202,  201,

      200,  198,  197,  196,  195,  194,  193,  192,  191,  190,
      189,  188,  187,  186,  185,  184,  167,  166,  164,  162,
      161,  160,  159,  158,  157,  156,  154,  153,  152,  151,
      150,  149,  148,  147,  146,  145,  144,  143,  142,  141,
      140,  139,  138,  137,  136,  133,  112,  111,  110,  108,
      107,  106,  104,  103,  102,  101,  100,   98,   97,   96,
       95,   94,   93,   92,   91,   90,   89,   88,   87,   86,
       85,   84,   83,   57,   56,   53,   52,   50,   49,   48,
       47,   46,   45,   41,   39,   19,   17,   16,   12,    7,
        3,  556,  556,  556,  556,  556,  556,  556,  556,  556,

      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "pddl+.lex"
#define INITIAL 0
#line 2 "pddl+.lex"

#include <string>


#line 693 "lex.yy.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 17 "pddl+.lex"

#line 822 "lex.yy.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 557 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 792 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 18 "pddl+.lex"
{return OPEN_BRAC;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 19 "pddl+.lex"
{return CLOSE_BRAC;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 20 "pddl+.lex"
{return OPEN_SQ;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 21 "pddl+.lex"
{return CLOSE_SQ;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 22 "pddl+.lex"
{return REQS;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 23 "pddl+.lex"
{return EQUALITY;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 24 "pddl+.lex"
{return STRIPS;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 25 "pddl+.lex"
{return ADL;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 26 "pddl+.lex"
{return TYPING;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 27 "pddl+.lex"
{return DISJUNCTIVE_PRECONDS;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 28 "pddl+.lex"
{return EXT_PRECS;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 29 "pddl+.lex"
{return UNIV_PRECS;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 30 "pddl+.lex"
{return QUANT_PRECS;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 31 "pddl+.lex"
{return COND_EFFS;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 32 "pddl+.lex"
{return FLUENTS;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 33 "pddl+.lex"
{return TIME;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 34 "pddl+.lex"
{return CONSTANTS;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 35 "pddl+.lex"
{return PREDS;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 36 "pddl+.lex"
{return FUNCTIONS;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 37 "pddl+.lex"
{return TYPES;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 38 "pddl+.lex"
{return DURATIVE_ACTIONS;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 39 "pddl+.lex"
{return DURATION_INEQUALITIES;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 40 "pddl+.lex"
{return CONTINUOUS_EFFECTS;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 41 "pddl+.lex"
{return NEGATIVE_PRECONDITIONS;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 42 "pddl+.lex"
{return DEFINE;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 43 "pddl+.lex"
{return DOMAIN;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 44 "pddl+.lex"
{return ACTION;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 45 "pddl+.lex"
{return PROCESS;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 46 "pddl+.lex"
{return EVENT;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 47 "pddl+.lex"
{return DURATIVE_ACTION;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 48 "pddl+.lex"
{return ARGS;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 49 "pddl+.lex"
{return PRE;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 50 "pddl+.lex"
{return CONDITION;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 51 "pddl+.lex"
{return START_PRE;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 52 "pddl+.lex"
{return END_PRE;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 53 "pddl+.lex"
{return AT_START;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 54 "pddl+.lex"
{return AT_END;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 55 "pddl+.lex"
{return OVER_ALL;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 56 "pddl+.lex"
{return EFFECTS;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 57 "pddl+.lex"
{return INITIAL_EFFECT;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 58 "pddl+.lex"
{return FINAL_EFFECT;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 59 "pddl+.lex"
{return INVARIANT;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 60 "pddl+.lex"
{return DURATION;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 61 "pddl+.lex"
{return AND;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 62 "pddl+.lex"
{return OR;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 63 "pddl+.lex"
{return EXISTS;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 64 "pddl+.lex"
{return FORALL;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 65 "pddl+.lex"
{return IMPLY;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 66 "pddl+.lex"
{return NOT;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 67 "pddl+.lex"
{return WHEN;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 68 "pddl+.lex"
{return EITHER;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 69 "pddl+.lex"
{return PROBLEM;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 70 "pddl+.lex"
{return FORDOMAIN;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 71 "pddl+.lex"
{return OBJECTS;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 72 "pddl+.lex"
{return INITIALLY;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 73 "pddl+.lex"
{return GOALS;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 74 "pddl+.lex"
{return EQ;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 75 "pddl+.lex"
{return LENGTH;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 76 "pddl+.lex"
{return SERIAL;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 77 "pddl+.lex"
{return PARALLEL;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 78 "pddl+.lex"
{return METRIC;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 79 "pddl+.lex"
{return MINIMIZE;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 80 "pddl+.lex"
{return MAXIMIZE;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 81 "pddl+.lex"
{return HASHT;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 82 "pddl+.lex"
{return DURATION_VAR;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 83 "pddl+.lex"
{return TOTAL_TIME;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 84 "pddl+.lex"
{return INCREASE;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 85 "pddl+.lex"
{return DECREASE;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 86 "pddl+.lex"
{return SCALE_UP;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 87 "pddl+.lex"
{return SCALE_DOWN;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 88 "pddl+.lex"
{return ASSIGN;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 89 "pddl+.lex"
{return PLUS;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 90 "pddl+.lex"
{return HYPHEN;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 91 "pddl+.lex"
{return MUL;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 92 "pddl+.lex"
{return DIV;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 93 "pddl+.lex"
{return GREATER;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 94 "pddl+.lex"
{return GREATEQ;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 95 "pddl+.lex"
{return LESS;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 96 "pddl+.lex"
{return LESSEQ;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 97 "pddl+.lex"
{return Q;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 98 "pddl+.lex"
{return COLON;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 100 "pddl+.lex"
{unsigned int i; 
          yylval.cp = new char[strlen(yytext)+1];
          strcpy(yylval.cp,yytext);
	  for(i = 0;i<strlen(yylval.cp);i++)
	      yylval.cp[i] = tolower(yylval.cp[i]);
	  // If symbol is registered as a function symbol,
	  // return token FUNCTION_SYMBOL else return NAME
	  if (current_analysis->func_tab.symbol_probe(yylval.cp) != NULL)
	      return FUNCTION_SYMBOL;
	  else
	      return NAME;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 112 "pddl+.lex"
;
	YY_BREAK
case 84:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 113 "pddl+.lex"
;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 114 "pddl+.lex"
{line_no++;};
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 116 "pddl+.lex"
{yylval.ival = atoi(yytext);return (INTVAL);}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 117 "pddl+.lex"
{yylval.fval = atof(yytext);return (FLOATVAL);}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 119 "pddl+.lex"
ECHO;
	YY_BREAK
#line 1358 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 557 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 557 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 556);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 119 "pddl+.lex"


int yywrap()
{
	return 1;
};
