Plan Validator for PDDL2.1
==========================

Derek Long and Maria Fox - PDDL2.1 and Validator
Stephen Cresswell - PDDL2.1 Parser
Durham Planning Group, University of Durham, UK

This code is written in C++ using the STL. It is known to compile
under Linux with Gnu C++ (2.95.3) and the associated STL and also with 
Gnu C++ 2.96. We have also built successfully on Sun machines using 
a Gnu installation (2.95.2). 

*** Now also built on SunOS using SunOS make with new Makefile.SunOS and
g++.

The parser requires flex++ and bison (also Gnu tools). See below for known 
problems and possible solutions.

The Makefile is automatically constructed using makemake with the
given Make.header and Make.files. It should not need to be touched
if the program is simply constructed "as is".

To build, simply "make". ("make -f Makefile.SunOS" if building on Sun
machine with SunOS make).

The executable is "validate". It expects three or more file name 
arguments: a domain, a problem and one or more plans. There are
also two optional arguments that must come first:

-t <n> where <n> is a (floating point format) value determining
the tolerance that is to be used in determining whether the plan
will execute correctly. In particular, this value must be set 
small enough to ensure that the time stamps on actions are
distinguishable (otherwise the validator will treat those actions
with time stamps closer than the tolerance value apart as simultaneous).
It defaults to 0.01. 

-v makes the output verbose - this is useful to find out more about
failing plans.

The validator parses and typechecks domains, problems and plans before
confirming that plans are valid. Plans that will not typecheck are 
listed as failed plans. Plans that fail for reasons that are not clear
are listed as queries (verbose mode should clarify what caused this).

You can also build a parser alone, using "make parser" which will build 
the executable "parser", taking any number of files to syntax check as 
arguments. The check on problem files requires the associated domain as a 
preceding argument.

If you find any bugs, have problems compiling or running the system or
have any comments please contact:

d.p.long@dur.ac.uk or maria.fox@dur.ac.uk


Known Problems
==============

The original release had a bad command in the Makefile - it has now been
fixed. There was also a bug in the typechecking, which assumed domains 
would always be typed, also now corrected.

Some older installations of g++ do not use the std namespace by default
and so there is a line in Plan.h which needs to be corrected. There is
now a switch in the start of the header: NO_STD_NAMESPACE which you can 
set to try to handle this problem if it affects you. 

Note that the installation expects to have flex++ if you build it from
clean, but the distribution includes the lex.yy.cc file built from 
pddl+.lex and the FlexLexer.h header file to avoid this dependency being
too great a problem. 

At least one person has reported a problem with the macros.h file. We are 
looking into this, but if you are included, please let us know.

Change Log
==========

30.03.02:	Minor additional robustness improvement and SunOS Makefile
		created.

22.03.02:	Improved robustness and error reporting. Made behaviour
		for reporting plan length more flexible and more 
		definitive. Fixed memory leaks and made it possible to
		check domains alone or domains with problems and no plans.
		Reporting of parse errors from validator improved.

19.03.02:	Corrected bug in conflict identification with commuting
		numeric effects.

25.02.02:	Corrected bug in handling of quantified goals with 
		multiple quantified variables. [Thanks to Dan Wu for
		pointing this one out!]

04.02.02:	Corrected bug in type-checking of equality. Note that 
		equality type-checking is currently lax - it allows 
		objects of any types to be compared, regardless of whether
		they are subtypes of a common parent or not. 

27.01.02:	Minor adjustments to output and tolerance default value.

21.01.02:	Corrected a bug in handling of types for typechecking
		(another!). Corrected use of requirements flags in
		durative actions.

18.10.01:	System now handles quantified effects. The approach is not
		very pretty, because it requires multiple new environments
		to be constructed and these cannot be easily garbage
		collected. A better approach might be to make Environment
		contain a chained sequence of maps to avoid copying old
		environment maps. Certainly not an issue in the
		short-term: plans are not that big!

14.01.02:	System now handles quantified preconditions. Also 
		corrected a bug in typechecker for handling type 
		hierarchies. All language complete to level 3 of PDDL2.1.


TODO:
=====
* A better treatment of tolerance - at least an automatic determination
  of a sensible value from the domain, problem and plan. We probably need
  a way to specify this to the planner as part of a problem specification.

